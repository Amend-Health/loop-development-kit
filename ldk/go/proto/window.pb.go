// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: window.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WindowAction int32

const (
	WindowAction_WINDOW_ACTION_UNKNOWN   WindowAction = 0
	WindowAction_WINDOW_ACTION_FOCUSED   WindowAction = 1
	WindowAction_WINDOW_ACTION_UNFOCUSED WindowAction = 2
	WindowAction_WINDOW_ACTION_OPENED    WindowAction = 3
	WindowAction_WINDOW_ACTION_CLOSED    WindowAction = 4
)

// Enum value maps for WindowAction.
var (
	WindowAction_name = map[int32]string{
		0: "WINDOW_ACTION_UNKNOWN",
		1: "WINDOW_ACTION_FOCUSED",
		2: "WINDOW_ACTION_UNFOCUSED",
		3: "WINDOW_ACTION_OPENED",
		4: "WINDOW_ACTION_CLOSED",
	}
	WindowAction_value = map[string]int32{
		"WINDOW_ACTION_UNKNOWN":   0,
		"WINDOW_ACTION_FOCUSED":   1,
		"WINDOW_ACTION_UNFOCUSED": 2,
		"WINDOW_ACTION_OPENED":    3,
		"WINDOW_ACTION_CLOSED":    4,
	}
)

func (x WindowAction) Enum() *WindowAction {
	p := new(WindowAction)
	*p = x
	return p
}

func (x WindowAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WindowAction) Descriptor() protoreflect.EnumDescriptor {
	return file_window_proto_enumTypes[0].Descriptor()
}

func (WindowAction) Type() protoreflect.EnumType {
	return &file_window_proto_enumTypes[0]
}

func (x WindowAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WindowAction.Descriptor instead.
func (WindowAction) EnumDescriptor() ([]byte, []int) {
	return file_window_proto_rawDescGZIP(), []int{0}
}

type WindowInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Path   string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Pid    int64  `protobuf:"varint,3,opt,name=pid,proto3" json:"pid,omitempty"`
	X      int32  `protobuf:"varint,4,opt,name=x,proto3" json:"x,omitempty"`
	Y      int32  `protobuf:"varint,5,opt,name=y,proto3" json:"y,omitempty"`
	Width  int32  `protobuf:"varint,6,opt,name=width,proto3" json:"width,omitempty"`
	Height int32  `protobuf:"varint,7,opt,name=height,proto3" json:"height,omitempty"`
}

func (x *WindowInfo) Reset() {
	*x = WindowInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_window_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowInfo) ProtoMessage() {}

func (x *WindowInfo) ProtoReflect() protoreflect.Message {
	mi := &file_window_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowInfo.ProtoReflect.Descriptor instead.
func (*WindowInfo) Descriptor() ([]byte, []int) {
	return file_window_proto_rawDescGZIP(), []int{0}
}

func (x *WindowInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *WindowInfo) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *WindowInfo) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *WindowInfo) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *WindowInfo) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *WindowInfo) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *WindowInfo) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

type ActiveWindowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window *WindowInfo `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
}

func (x *ActiveWindowResponse) Reset() {
	*x = ActiveWindowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_window_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveWindowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveWindowResponse) ProtoMessage() {}

func (x *ActiveWindowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_window_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveWindowResponse.ProtoReflect.Descriptor instead.
func (*ActiveWindowResponse) Descriptor() ([]byte, []int) {
	return file_window_proto_rawDescGZIP(), []int{1}
}

func (x *ActiveWindowResponse) GetWindow() *WindowInfo {
	if x != nil {
		return x.Window
	}
	return nil
}

type ActiveWindowStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window *WindowInfo `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	Error  string      `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ActiveWindowStreamResponse) Reset() {
	*x = ActiveWindowStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_window_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActiveWindowStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActiveWindowStreamResponse) ProtoMessage() {}

func (x *ActiveWindowStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_window_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActiveWindowStreamResponse.ProtoReflect.Descriptor instead.
func (*ActiveWindowStreamResponse) Descriptor() ([]byte, []int) {
	return file_window_proto_rawDescGZIP(), []int{2}
}

func (x *ActiveWindowStreamResponse) GetWindow() *WindowInfo {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *ActiveWindowStreamResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type WindowStateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window []*WindowInfo `protobuf:"bytes,1,rep,name=window,proto3" json:"window,omitempty"`
}

func (x *WindowStateResponse) Reset() {
	*x = WindowStateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_window_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowStateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowStateResponse) ProtoMessage() {}

func (x *WindowStateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_window_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowStateResponse.ProtoReflect.Descriptor instead.
func (*WindowStateResponse) Descriptor() ([]byte, []int) {
	return file_window_proto_rawDescGZIP(), []int{3}
}

func (x *WindowStateResponse) GetWindow() []*WindowInfo {
	if x != nil {
		return x.Window
	}
	return nil
}

type WindowStateStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Window *WindowInfo  `protobuf:"bytes,1,opt,name=window,proto3" json:"window,omitempty"`
	Action WindowAction `protobuf:"varint,2,opt,name=action,proto3,enum=proto.WindowAction" json:"action,omitempty"`
	Error  string       `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *WindowStateStreamResponse) Reset() {
	*x = WindowStateStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_window_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WindowStateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WindowStateStreamResponse) ProtoMessage() {}

func (x *WindowStateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_window_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WindowStateStreamResponse.ProtoReflect.Descriptor instead.
func (*WindowStateStreamResponse) Descriptor() ([]byte, []int) {
	return file_window_proto_rawDescGZIP(), []int{4}
}

func (x *WindowStateStreamResponse) GetWindow() *WindowInfo {
	if x != nil {
		return x.Window
	}
	return nil
}

func (x *WindowStateStreamResponse) GetAction() WindowAction {
	if x != nil {
		return x.Action
	}
	return WindowAction_WINDOW_ACTION_UNKNOWN
}

func (x *WindowStateStreamResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

var File_window_proto protoreflect.FileDescriptor

var file_window_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x70,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x0c, 0x0a,
	0x01, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x69, 0x64,
	0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x41, 0x0a, 0x14, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x29, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x5d, 0x0a, 0x1a, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x40, 0x0a, 0x13, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x22, 0x89, 0x01, 0x0a, 0x19,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x06, 0x77, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x12, 0x2b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2a, 0x95, 0x01, 0x0a, 0x0c, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x49, 0x4e, 0x44,
	0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x1b,
	0x0a, 0x17, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x55, 0x4e, 0x46, 0x4f, 0x43, 0x55, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x57,
	0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4f, 0x50, 0x45,
	0x4e, 0x45, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x5f,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x44, 0x10, 0x04, 0x32,
	0x9c, 0x02, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x12, 0x3d, 0x0a, 0x06, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_window_proto_rawDescOnce sync.Once
	file_window_proto_rawDescData = file_window_proto_rawDesc
)

func file_window_proto_rawDescGZIP() []byte {
	file_window_proto_rawDescOnce.Do(func() {
		file_window_proto_rawDescData = protoimpl.X.CompressGZIP(file_window_proto_rawDescData)
	})
	return file_window_proto_rawDescData
}

var file_window_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_window_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_window_proto_goTypes = []interface{}{
	(WindowAction)(0),                  // 0: proto.WindowAction
	(*WindowInfo)(nil),                 // 1: proto.WindowInfo
	(*ActiveWindowResponse)(nil),       // 2: proto.ActiveWindowResponse
	(*ActiveWindowStreamResponse)(nil), // 3: proto.ActiveWindowStreamResponse
	(*WindowStateResponse)(nil),        // 4: proto.WindowStateResponse
	(*WindowStateStreamResponse)(nil),  // 5: proto.WindowStateStreamResponse
	(*empty.Empty)(nil),                // 6: google.protobuf.Empty
}
var file_window_proto_depIdxs = []int32{
	1, // 0: proto.ActiveWindowResponse.window:type_name -> proto.WindowInfo
	1, // 1: proto.ActiveWindowStreamResponse.window:type_name -> proto.WindowInfo
	1, // 2: proto.WindowStateResponse.window:type_name -> proto.WindowInfo
	1, // 3: proto.WindowStateStreamResponse.window:type_name -> proto.WindowInfo
	0, // 4: proto.WindowStateStreamResponse.action:type_name -> proto.WindowAction
	6, // 5: proto.Window.Active:input_type -> google.protobuf.Empty
	6, // 6: proto.Window.ActiveStream:input_type -> google.protobuf.Empty
	6, // 7: proto.Window.State:input_type -> google.protobuf.Empty
	6, // 8: proto.Window.StateStream:input_type -> google.protobuf.Empty
	2, // 9: proto.Window.Active:output_type -> proto.ActiveWindowResponse
	3, // 10: proto.Window.ActiveStream:output_type -> proto.ActiveWindowStreamResponse
	4, // 11: proto.Window.State:output_type -> proto.WindowStateResponse
	5, // 12: proto.Window.StateStream:output_type -> proto.WindowStateStreamResponse
	9, // [9:13] is the sub-list for method output_type
	5, // [5:9] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_window_proto_init() }
func file_window_proto_init() {
	if File_window_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_window_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_window_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveWindowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_window_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActiveWindowStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_window_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowStateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_window_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WindowStateStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_window_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_window_proto_goTypes,
		DependencyIndexes: file_window_proto_depIdxs,
		EnumInfos:         file_window_proto_enumTypes,
		MessageInfos:      file_window_proto_msgTypes,
	}.Build()
	File_window_proto = out.File
	file_window_proto_rawDesc = nil
	file_window_proto_goTypes = nil
	file_window_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WindowClient is the client API for Window service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WindowClient interface {
	// get information about currently focused window
	Active(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ActiveWindowResponse, error)
	// stream information about currently focused window as it changes
	ActiveStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Window_ActiveStreamClient, error)
	// get information about all windows
	State(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WindowStateResponse, error)
	// get information about windows as they change
	StateStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Window_StateStreamClient, error)
}

type windowClient struct {
	cc grpc.ClientConnInterface
}

func NewWindowClient(cc grpc.ClientConnInterface) WindowClient {
	return &windowClient{cc}
}

func (c *windowClient) Active(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ActiveWindowResponse, error) {
	out := new(ActiveWindowResponse)
	err := c.cc.Invoke(ctx, "/proto.Window/Active", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *windowClient) ActiveStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Window_ActiveStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Window_serviceDesc.Streams[0], "/proto.Window/ActiveStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &windowActiveStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Window_ActiveStreamClient interface {
	Recv() (*ActiveWindowStreamResponse, error)
	grpc.ClientStream
}

type windowActiveStreamClient struct {
	grpc.ClientStream
}

func (x *windowActiveStreamClient) Recv() (*ActiveWindowStreamResponse, error) {
	m := new(ActiveWindowStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *windowClient) State(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*WindowStateResponse, error) {
	out := new(WindowStateResponse)
	err := c.cc.Invoke(ctx, "/proto.Window/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *windowClient) StateStream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Window_StateStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Window_serviceDesc.Streams[1], "/proto.Window/StateStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &windowStateStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Window_StateStreamClient interface {
	Recv() (*WindowStateStreamResponse, error)
	grpc.ClientStream
}

type windowStateStreamClient struct {
	grpc.ClientStream
}

func (x *windowStateStreamClient) Recv() (*WindowStateStreamResponse, error) {
	m := new(WindowStateStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// WindowServer is the server API for Window service.
type WindowServer interface {
	// get information about currently focused window
	Active(context.Context, *empty.Empty) (*ActiveWindowResponse, error)
	// stream information about currently focused window as it changes
	ActiveStream(*empty.Empty, Window_ActiveStreamServer) error
	// get information about all windows
	State(context.Context, *empty.Empty) (*WindowStateResponse, error)
	// get information about windows as they change
	StateStream(*empty.Empty, Window_StateStreamServer) error
}

// UnimplementedWindowServer can be embedded to have forward compatible implementations.
type UnimplementedWindowServer struct {
}

func (*UnimplementedWindowServer) Active(context.Context, *empty.Empty) (*ActiveWindowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (*UnimplementedWindowServer) ActiveStream(*empty.Empty, Window_ActiveStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ActiveStream not implemented")
}
func (*UnimplementedWindowServer) State(context.Context, *empty.Empty) (*WindowStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (*UnimplementedWindowServer) StateStream(*empty.Empty, Window_StateStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method StateStream not implemented")
}

func RegisterWindowServer(s *grpc.Server, srv WindowServer) {
	s.RegisterService(&_Window_serviceDesc, srv)
}

func _Window_Active_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowServer).Active(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Window/Active",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowServer).Active(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Window_ActiveStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WindowServer).ActiveStream(m, &windowActiveStreamServer{stream})
}

type Window_ActiveStreamServer interface {
	Send(*ActiveWindowStreamResponse) error
	grpc.ServerStream
}

type windowActiveStreamServer struct {
	grpc.ServerStream
}

func (x *windowActiveStreamServer) Send(m *ActiveWindowStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Window_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WindowServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Window/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WindowServer).State(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Window_StateStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WindowServer).StateStream(m, &windowStateStreamServer{stream})
}

type Window_StateStreamServer interface {
	Send(*WindowStateStreamResponse) error
	grpc.ServerStream
}

type windowStateStreamServer struct {
	grpc.ServerStream
}

func (x *windowStateStreamServer) Send(m *WindowStateStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _Window_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Window",
	HandlerType: (*WindowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Active",
			Handler:    _Window_Active_Handler,
		},
		{
			MethodName: "State",
			Handler:    _Window_State_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ActiveStream",
			Handler:       _Window_ActiveStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StateStream",
			Handler:       _Window_StateStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "window.proto",
}
