// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.13.0
// source: filesystem.proto

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FileAction int32

const (
	FileAction_FILE_ACTION_UNKNOWN FileAction = 0
	FileAction_FILE_ACTION_CREATE  FileAction = 1
	FileAction_FILE_ACTION_WRITE   FileAction = 2
	FileAction_FILE_ACTION_REMOVE  FileAction = 3
	FileAction_FILE_ACTION_RENAME  FileAction = 4
	FileAction_FILE_ACTION_CHMOD   FileAction = 5
)

// Enum value maps for FileAction.
var (
	FileAction_name = map[int32]string{
		0: "FILE_ACTION_UNKNOWN",
		1: "FILE_ACTION_CREATE",
		2: "FILE_ACTION_WRITE",
		3: "FILE_ACTION_REMOVE",
		4: "FILE_ACTION_RENAME",
		5: "FILE_ACTION_CHMOD",
	}
	FileAction_value = map[string]int32{
		"FILE_ACTION_UNKNOWN": 0,
		"FILE_ACTION_CREATE":  1,
		"FILE_ACTION_WRITE":   2,
		"FILE_ACTION_REMOVE":  3,
		"FILE_ACTION_RENAME":  4,
		"FILE_ACTION_CHMOD":   5,
	}
)

func (x FileAction) Enum() *FileAction {
	p := new(FileAction)
	*p = x
	return p
}

func (x FileAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FileAction) Descriptor() protoreflect.EnumDescriptor {
	return file_filesystem_proto_enumTypes[0].Descriptor()
}

func (FileAction) Type() protoreflect.EnumType {
	return &file_filesystem_proto_enumTypes[0]
}

func (x FileAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FileAction.Descriptor instead.
func (FileAction) EnumDescriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{0}
}

type FileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Size    int64                `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Mode    uint32               `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
	Updated *timestamp.Timestamp `protobuf:"bytes,4,opt,name=updated,proto3" json:"updated,omitempty"`
	IsDir   bool                 `protobuf:"varint,5,opt,name=isDir,proto3" json:"isDir,omitempty"`
}

func (x *FileInfo) Reset() {
	*x = FileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileInfo) ProtoMessage() {}

func (x *FileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileInfo.ProtoReflect.Descriptor instead.
func (*FileInfo) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{0}
}

func (x *FileInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FileInfo) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *FileInfo) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FileInfo) GetUpdated() *timestamp.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *FileInfo) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

type FilesystemDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session   *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Directory string   `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *FilesystemDirRequest) Reset() {
	*x = FilesystemDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDirRequest) ProtoMessage() {}

func (x *FilesystemDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDirRequest.ProtoReflect.Descriptor instead.
func (*FilesystemDirRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{1}
}

func (x *FilesystemDirRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemDirRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type FilesystemDirResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Files []*FileInfo `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
}

func (x *FilesystemDirResponse) Reset() {
	*x = FilesystemDirResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDirResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDirResponse) ProtoMessage() {}

func (x *FilesystemDirResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDirResponse.ProtoReflect.Descriptor instead.
func (*FilesystemDirResponse) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{2}
}

func (x *FilesystemDirResponse) GetFiles() []*FileInfo {
	if x != nil {
		return x.Files
	}
	return nil
}

type FilesystemDirStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session   *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Directory string   `protobuf:"bytes,2,opt,name=directory,proto3" json:"directory,omitempty"`
}

func (x *FilesystemDirStreamRequest) Reset() {
	*x = FilesystemDirStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDirStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDirStreamRequest) ProtoMessage() {}

func (x *FilesystemDirStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDirStreamRequest.ProtoReflect.Descriptor instead.
func (*FilesystemDirStreamRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{3}
}

func (x *FilesystemDirStreamRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemDirStreamRequest) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

type FilesystemDirStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File   *FileInfo  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Action FileAction `protobuf:"varint,2,opt,name=action,proto3,enum=proto.FileAction" json:"action,omitempty"`
	Error  string     `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FilesystemDirStreamResponse) Reset() {
	*x = FilesystemDirStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemDirStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemDirStreamResponse) ProtoMessage() {}

func (x *FilesystemDirStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemDirStreamResponse.ProtoReflect.Descriptor instead.
func (*FilesystemDirStreamResponse) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{4}
}

func (x *FilesystemDirStreamResponse) GetFile() *FileInfo {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FilesystemDirStreamResponse) GetAction() FileAction {
	if x != nil {
		return x.Action
	}
	return FileAction_FILE_ACTION_UNKNOWN
}

func (x *FilesystemDirStreamResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FilesystemFileInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Path    string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FilesystemFileInfoRequest) Reset() {
	*x = FilesystemFileInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemFileInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemFileInfoRequest) ProtoMessage() {}

func (x *FilesystemFileInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemFileInfoRequest.ProtoReflect.Descriptor instead.
func (*FilesystemFileInfoRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{5}
}

func (x *FilesystemFileInfoRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemFileInfoRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FilesystemFileInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File *FileInfo `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *FilesystemFileInfoResponse) Reset() {
	*x = FilesystemFileInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemFileInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemFileInfoResponse) ProtoMessage() {}

func (x *FilesystemFileInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemFileInfoResponse.ProtoReflect.Descriptor instead.
func (*FilesystemFileInfoResponse) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{6}
}

func (x *FilesystemFileInfoResponse) GetFile() *FileInfo {
	if x != nil {
		return x.File
	}
	return nil
}

type FilesystemFileInfoStreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Path    string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *FilesystemFileInfoStreamRequest) Reset() {
	*x = FilesystemFileInfoStreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemFileInfoStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemFileInfoStreamRequest) ProtoMessage() {}

func (x *FilesystemFileInfoStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemFileInfoStreamRequest.ProtoReflect.Descriptor instead.
func (*FilesystemFileInfoStreamRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{7}
}

func (x *FilesystemFileInfoStreamRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemFileInfoStreamRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type FilesystemFileInfoStreamResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	File   *FileInfo  `protobuf:"bytes,1,opt,name=file,proto3" json:"file,omitempty"`
	Action FileAction `protobuf:"varint,2,opt,name=action,proto3,enum=proto.FileAction" json:"action,omitempty"`
	Error  string     `protobuf:"bytes,15,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *FilesystemFileInfoStreamResponse) Reset() {
	*x = FilesystemFileInfoStreamResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemFileInfoStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemFileInfoStreamResponse) ProtoMessage() {}

func (x *FilesystemFileInfoStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemFileInfoStreamResponse.ProtoReflect.Descriptor instead.
func (*FilesystemFileInfoStreamResponse) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{8}
}

func (x *FilesystemFileInfoStreamResponse) GetFile() *FileInfo {
	if x != nil {
		return x.File
	}
	return nil
}

func (x *FilesystemFileInfoStreamResponse) GetAction() FileAction {
	if x != nil {
		return x.Action
	}
	return FileAction_FILE_ACTION_UNKNOWN
}

func (x *FilesystemFileInfoStreamResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type FilesystemMakeDirRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Path    string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Perm    uint32   `protobuf:"varint,3,opt,name=perm,proto3" json:"perm,omitempty"`
}

func (x *FilesystemMakeDirRequest) Reset() {
	*x = FilesystemMakeDirRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMakeDirRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMakeDirRequest) ProtoMessage() {}

func (x *FilesystemMakeDirRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMakeDirRequest.ProtoReflect.Descriptor instead.
func (*FilesystemMakeDirRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{9}
}

func (x *FilesystemMakeDirRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemMakeDirRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FilesystemMakeDirRequest) GetPerm() uint32 {
	if x != nil {
		return x.Perm
	}
	return 0
}

type FilesystemCopyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Source  string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Dest    string   `protobuf:"bytes,3,opt,name=dest,proto3" json:"dest,omitempty"`
}

func (x *FilesystemCopyRequest) Reset() {
	*x = FilesystemCopyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemCopyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemCopyRequest) ProtoMessage() {}

func (x *FilesystemCopyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemCopyRequest.ProtoReflect.Descriptor instead.
func (*FilesystemCopyRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{10}
}

func (x *FilesystemCopyRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemCopyRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *FilesystemCopyRequest) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

type FilesystemMoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Source  string   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Dest    string   `protobuf:"bytes,3,opt,name=dest,proto3" json:"dest,omitempty"`
}

func (x *FilesystemMoveRequest) Reset() {
	*x = FilesystemMoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemMoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemMoveRequest) ProtoMessage() {}

func (x *FilesystemMoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemMoveRequest.ProtoReflect.Descriptor instead.
func (*FilesystemMoveRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{11}
}

func (x *FilesystemMoveRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemMoveRequest) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

func (x *FilesystemMoveRequest) GetDest() string {
	if x != nil {
		return x.Dest
	}
	return ""
}

type FilesystemRemoveRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session   *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Path      string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Recursive bool     `protobuf:"varint,3,opt,name=recursive,proto3" json:"recursive,omitempty"`
}

func (x *FilesystemRemoveRequest) Reset() {
	*x = FilesystemRemoveRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemRemoveRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemRemoveRequest) ProtoMessage() {}

func (x *FilesystemRemoveRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemRemoveRequest.ProtoReflect.Descriptor instead.
func (*FilesystemRemoveRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{12}
}

func (x *FilesystemRemoveRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemRemoveRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FilesystemRemoveRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type FilesystemChmodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Path    string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Mode    uint32   `protobuf:"varint,3,opt,name=mode,proto3" json:"mode,omitempty"`
}

func (x *FilesystemChmodRequest) Reset() {
	*x = FilesystemChmodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemChmodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemChmodRequest) ProtoMessage() {}

func (x *FilesystemChmodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemChmodRequest.ProtoReflect.Descriptor instead.
func (*FilesystemChmodRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{13}
}

func (x *FilesystemChmodRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemChmodRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FilesystemChmodRequest) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

type FilesystemChownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Session *Session `protobuf:"bytes,1,opt,name=session,proto3" json:"session,omitempty"`
	Path    string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Uid     int32    `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Gid     int32    `protobuf:"varint,4,opt,name=gid,proto3" json:"gid,omitempty"`
}

func (x *FilesystemChownRequest) Reset() {
	*x = FilesystemChownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_filesystem_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilesystemChownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemChownRequest) ProtoMessage() {}

func (x *FilesystemChownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_filesystem_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemChownRequest.ProtoReflect.Descriptor instead.
func (*FilesystemChownRequest) Descriptor() ([]byte, []int) {
	return file_filesystem_proto_rawDescGZIP(), []int{14}
}

func (x *FilesystemChownRequest) GetSession() *Session {
	if x != nil {
		return x.Session
	}
	return nil
}

func (x *FilesystemChownRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *FilesystemChownRequest) GetUid() int32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *FilesystemChownRequest) GetGid() int32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

var File_filesystem_proto protoreflect.FileDescriptor

var file_filesystem_proto_rawDesc = []byte{
	0x0a, 0x10, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x92, 0x01, 0x0a, 0x08, 0x46, 0x69, 0x6c, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44, 0x69, 0x72, 0x22, 0x5e, 0x0a, 0x14, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a,
	0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0x3e, 0x0a, 0x15, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x1a, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x72, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x22, 0x83, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x44, 0x69, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x19, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x41, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x5f, 0x0a, 0x1f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x88, 0x01, 0x0a, 0x20, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x66,
	0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65,
	0x12, 0x29, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x6c, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d,
	0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x22,
	0x6d, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x70,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x22, 0x6d,
	0x0a, 0x15, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x76, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x74, 0x22, 0x75, 0x0a,
	0x17, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72,
	0x73, 0x69, 0x76, 0x65, 0x22, 0x6a, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x68, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28,
	0x0a, 0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65,
	0x22, 0x7a, 0x0a, 0x16, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68,
	0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x07, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x75, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x67, 0x69, 0x64, 0x2a, 0x9b, 0x01, 0x0a,
	0x0a, 0x46, 0x69, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x57, 0x52, 0x49, 0x54,
	0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x46,
	0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x4e, 0x41, 0x4d,
	0x45, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x41, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x43, 0x48, 0x4d, 0x4f, 0x44, 0x10, 0x05, 0x32, 0xc0, 0x06, 0x0a, 0x0a, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x4a, 0x0a, 0x0d, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x13, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x44, 0x69, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44,
	0x69, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x44, 0x69, 0x72, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x30, 0x01, 0x12, 0x59, 0x0a, 0x12, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6d, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x26, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46,
	0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x12,
	0x4c, 0x0a, 0x11, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6b,
	0x65, 0x44, 0x69, 0x72, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6b, 0x65, 0x44, 0x69, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a,
	0x0e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6f, 0x70, 0x79, 0x12,
	0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x43, 0x6f, 0x70, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x6f, 0x76, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a,
	0x10, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x12, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6d, 0x6f, 0x64, 0x12, 0x1d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43,
	0x68, 0x6d, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x0f, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x68, 0x6f, 0x77, 0x6e, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x68, 0x6f, 0x77, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_filesystem_proto_rawDescOnce sync.Once
	file_filesystem_proto_rawDescData = file_filesystem_proto_rawDesc
)

func file_filesystem_proto_rawDescGZIP() []byte {
	file_filesystem_proto_rawDescOnce.Do(func() {
		file_filesystem_proto_rawDescData = protoimpl.X.CompressGZIP(file_filesystem_proto_rawDescData)
	})
	return file_filesystem_proto_rawDescData
}

var file_filesystem_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_filesystem_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_filesystem_proto_goTypes = []interface{}{
	(FileAction)(0),                          // 0: proto.FileAction
	(*FileInfo)(nil),                         // 1: proto.FileInfo
	(*FilesystemDirRequest)(nil),             // 2: proto.FilesystemDirRequest
	(*FilesystemDirResponse)(nil),            // 3: proto.FilesystemDirResponse
	(*FilesystemDirStreamRequest)(nil),       // 4: proto.FilesystemDirStreamRequest
	(*FilesystemDirStreamResponse)(nil),      // 5: proto.FilesystemDirStreamResponse
	(*FilesystemFileInfoRequest)(nil),        // 6: proto.FilesystemFileInfoRequest
	(*FilesystemFileInfoResponse)(nil),       // 7: proto.FilesystemFileInfoResponse
	(*FilesystemFileInfoStreamRequest)(nil),  // 8: proto.FilesystemFileInfoStreamRequest
	(*FilesystemFileInfoStreamResponse)(nil), // 9: proto.FilesystemFileInfoStreamResponse
	(*FilesystemMakeDirRequest)(nil),         // 10: proto.FilesystemMakeDirRequest
	(*FilesystemCopyRequest)(nil),            // 11: proto.FilesystemCopyRequest
	(*FilesystemMoveRequest)(nil),            // 12: proto.FilesystemMoveRequest
	(*FilesystemRemoveRequest)(nil),          // 13: proto.FilesystemRemoveRequest
	(*FilesystemChmodRequest)(nil),           // 14: proto.FilesystemChmodRequest
	(*FilesystemChownRequest)(nil),           // 15: proto.FilesystemChownRequest
	(*timestamp.Timestamp)(nil),              // 16: google.protobuf.Timestamp
	(*Session)(nil),                          // 17: proto.Session
	(*empty.Empty)(nil),                      // 18: google.protobuf.Empty
}
var file_filesystem_proto_depIdxs = []int32{
	16, // 0: proto.FileInfo.updated:type_name -> google.protobuf.Timestamp
	17, // 1: proto.FilesystemDirRequest.session:type_name -> proto.Session
	1,  // 2: proto.FilesystemDirResponse.files:type_name -> proto.FileInfo
	17, // 3: proto.FilesystemDirStreamRequest.session:type_name -> proto.Session
	1,  // 4: proto.FilesystemDirStreamResponse.file:type_name -> proto.FileInfo
	0,  // 5: proto.FilesystemDirStreamResponse.action:type_name -> proto.FileAction
	17, // 6: proto.FilesystemFileInfoRequest.session:type_name -> proto.Session
	1,  // 7: proto.FilesystemFileInfoResponse.file:type_name -> proto.FileInfo
	17, // 8: proto.FilesystemFileInfoStreamRequest.session:type_name -> proto.Session
	1,  // 9: proto.FilesystemFileInfoStreamResponse.file:type_name -> proto.FileInfo
	0,  // 10: proto.FilesystemFileInfoStreamResponse.action:type_name -> proto.FileAction
	17, // 11: proto.FilesystemMakeDirRequest.session:type_name -> proto.Session
	17, // 12: proto.FilesystemCopyRequest.session:type_name -> proto.Session
	17, // 13: proto.FilesystemMoveRequest.session:type_name -> proto.Session
	17, // 14: proto.FilesystemRemoveRequest.session:type_name -> proto.Session
	17, // 15: proto.FilesystemChmodRequest.session:type_name -> proto.Session
	17, // 16: proto.FilesystemChownRequest.session:type_name -> proto.Session
	2,  // 17: proto.Filesystem.FilesystemDir:input_type -> proto.FilesystemDirRequest
	4,  // 18: proto.Filesystem.FilesystemDirStream:input_type -> proto.FilesystemDirStreamRequest
	6,  // 19: proto.Filesystem.FilesystemFileInfo:input_type -> proto.FilesystemFileInfoRequest
	8,  // 20: proto.Filesystem.FilesystemFileInfoStream:input_type -> proto.FilesystemFileInfoStreamRequest
	10, // 21: proto.Filesystem.FilesystemMakeDir:input_type -> proto.FilesystemMakeDirRequest
	11, // 22: proto.Filesystem.FilesystemCopy:input_type -> proto.FilesystemCopyRequest
	12, // 23: proto.Filesystem.FilesystemMove:input_type -> proto.FilesystemMoveRequest
	13, // 24: proto.Filesystem.FilesystemRemove:input_type -> proto.FilesystemRemoveRequest
	14, // 25: proto.Filesystem.FilesystemChmod:input_type -> proto.FilesystemChmodRequest
	15, // 26: proto.Filesystem.FilesystemChown:input_type -> proto.FilesystemChownRequest
	3,  // 27: proto.Filesystem.FilesystemDir:output_type -> proto.FilesystemDirResponse
	5,  // 28: proto.Filesystem.FilesystemDirStream:output_type -> proto.FilesystemDirStreamResponse
	7,  // 29: proto.Filesystem.FilesystemFileInfo:output_type -> proto.FilesystemFileInfoResponse
	9,  // 30: proto.Filesystem.FilesystemFileInfoStream:output_type -> proto.FilesystemFileInfoStreamResponse
	18, // 31: proto.Filesystem.FilesystemMakeDir:output_type -> google.protobuf.Empty
	18, // 32: proto.Filesystem.FilesystemCopy:output_type -> google.protobuf.Empty
	18, // 33: proto.Filesystem.FilesystemMove:output_type -> google.protobuf.Empty
	18, // 34: proto.Filesystem.FilesystemRemove:output_type -> google.protobuf.Empty
	18, // 35: proto.Filesystem.FilesystemChmod:output_type -> google.protobuf.Empty
	18, // 36: proto.Filesystem.FilesystemChown:output_type -> google.protobuf.Empty
	27, // [27:37] is the sub-list for method output_type
	17, // [17:27] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_filesystem_proto_init() }
func file_filesystem_proto_init() {
	if File_filesystem_proto != nil {
		return
	}
	file_session_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_filesystem_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDirResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDirStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemDirStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemFileInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemFileInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemFileInfoStreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemFileInfoStreamResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMakeDirRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemCopyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemMoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemRemoveRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemChmodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_filesystem_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilesystemChownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_filesystem_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_filesystem_proto_goTypes,
		DependencyIndexes: file_filesystem_proto_depIdxs,
		EnumInfos:         file_filesystem_proto_enumTypes,
		MessageInfos:      file_filesystem_proto_msgTypes,
	}.Build()
	File_filesystem_proto = out.File
	file_filesystem_proto_rawDesc = nil
	file_filesystem_proto_goTypes = nil
	file_filesystem_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FilesystemClient is the client API for Filesystem service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FilesystemClient interface {
	// list the contents of a directory
	FilesystemDir(ctx context.Context, in *FilesystemDirRequest, opts ...grpc.CallOption) (*FilesystemDirResponse, error)
	// stream any updates to the contents of a directory
	FilesystemDirStream(ctx context.Context, in *FilesystemDirStreamRequest, opts ...grpc.CallOption) (Filesystem_FilesystemDirStreamClient, error)
	// get information about a file
	FilesystemFileInfo(ctx context.Context, in *FilesystemFileInfoRequest, opts ...grpc.CallOption) (*FilesystemFileInfoResponse, error)
	// stream any updates to a file
	FilesystemFileInfoStream(ctx context.Context, in *FilesystemFileInfoStreamRequest, opts ...grpc.CallOption) (Filesystem_FilesystemFileInfoStreamClient, error)
	// create directory
	FilesystemMakeDir(ctx context.Context, in *FilesystemMakeDirRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//  copy
	FilesystemCopy(ctx context.Context, in *FilesystemCopyRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	//  move
	FilesystemMove(ctx context.Context, in *FilesystemMoveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// remove
	FilesystemRemove(ctx context.Context, in *FilesystemRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// chmod
	FilesystemChmod(ctx context.Context, in *FilesystemChmodRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// chown
	FilesystemChown(ctx context.Context, in *FilesystemChownRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type filesystemClient struct {
	cc grpc.ClientConnInterface
}

func NewFilesystemClient(cc grpc.ClientConnInterface) FilesystemClient {
	return &filesystemClient{cc}
}

func (c *filesystemClient) FilesystemDir(ctx context.Context, in *FilesystemDirRequest, opts ...grpc.CallOption) (*FilesystemDirResponse, error) {
	out := new(FilesystemDirResponse)
	err := c.cc.Invoke(ctx, "/proto.Filesystem/FilesystemDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) FilesystemDirStream(ctx context.Context, in *FilesystemDirStreamRequest, opts ...grpc.CallOption) (Filesystem_FilesystemDirStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Filesystem_serviceDesc.Streams[0], "/proto.Filesystem/FilesystemDirStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemFilesystemDirStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Filesystem_FilesystemDirStreamClient interface {
	Recv() (*FilesystemDirStreamResponse, error)
	grpc.ClientStream
}

type filesystemFilesystemDirStreamClient struct {
	grpc.ClientStream
}

func (x *filesystemFilesystemDirStreamClient) Recv() (*FilesystemDirStreamResponse, error) {
	m := new(FilesystemDirStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemClient) FilesystemFileInfo(ctx context.Context, in *FilesystemFileInfoRequest, opts ...grpc.CallOption) (*FilesystemFileInfoResponse, error) {
	out := new(FilesystemFileInfoResponse)
	err := c.cc.Invoke(ctx, "/proto.Filesystem/FilesystemFileInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) FilesystemFileInfoStream(ctx context.Context, in *FilesystemFileInfoStreamRequest, opts ...grpc.CallOption) (Filesystem_FilesystemFileInfoStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Filesystem_serviceDesc.Streams[1], "/proto.Filesystem/FilesystemFileInfoStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &filesystemFilesystemFileInfoStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Filesystem_FilesystemFileInfoStreamClient interface {
	Recv() (*FilesystemFileInfoStreamResponse, error)
	grpc.ClientStream
}

type filesystemFilesystemFileInfoStreamClient struct {
	grpc.ClientStream
}

func (x *filesystemFilesystemFileInfoStreamClient) Recv() (*FilesystemFileInfoStreamResponse, error) {
	m := new(FilesystemFileInfoStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *filesystemClient) FilesystemMakeDir(ctx context.Context, in *FilesystemMakeDirRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Filesystem/FilesystemMakeDir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) FilesystemCopy(ctx context.Context, in *FilesystemCopyRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Filesystem/FilesystemCopy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) FilesystemMove(ctx context.Context, in *FilesystemMoveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Filesystem/FilesystemMove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) FilesystemRemove(ctx context.Context, in *FilesystemRemoveRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Filesystem/FilesystemRemove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) FilesystemChmod(ctx context.Context, in *FilesystemChmodRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Filesystem/FilesystemChmod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *filesystemClient) FilesystemChown(ctx context.Context, in *FilesystemChownRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/proto.Filesystem/FilesystemChown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FilesystemServer is the server API for Filesystem service.
type FilesystemServer interface {
	// list the contents of a directory
	FilesystemDir(context.Context, *FilesystemDirRequest) (*FilesystemDirResponse, error)
	// stream any updates to the contents of a directory
	FilesystemDirStream(*FilesystemDirStreamRequest, Filesystem_FilesystemDirStreamServer) error
	// get information about a file
	FilesystemFileInfo(context.Context, *FilesystemFileInfoRequest) (*FilesystemFileInfoResponse, error)
	// stream any updates to a file
	FilesystemFileInfoStream(*FilesystemFileInfoStreamRequest, Filesystem_FilesystemFileInfoStreamServer) error
	// create directory
	FilesystemMakeDir(context.Context, *FilesystemMakeDirRequest) (*empty.Empty, error)
	//  copy
	FilesystemCopy(context.Context, *FilesystemCopyRequest) (*empty.Empty, error)
	//  move
	FilesystemMove(context.Context, *FilesystemMoveRequest) (*empty.Empty, error)
	// remove
	FilesystemRemove(context.Context, *FilesystemRemoveRequest) (*empty.Empty, error)
	// chmod
	FilesystemChmod(context.Context, *FilesystemChmodRequest) (*empty.Empty, error)
	// chown
	FilesystemChown(context.Context, *FilesystemChownRequest) (*empty.Empty, error)
}

// UnimplementedFilesystemServer can be embedded to have forward compatible implementations.
type UnimplementedFilesystemServer struct {
}

func (*UnimplementedFilesystemServer) FilesystemDir(context.Context, *FilesystemDirRequest) (*FilesystemDirResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesystemDir not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemDirStream(*FilesystemDirStreamRequest, Filesystem_FilesystemDirStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FilesystemDirStream not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemFileInfo(context.Context, *FilesystemFileInfoRequest) (*FilesystemFileInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesystemFileInfo not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemFileInfoStream(*FilesystemFileInfoStreamRequest, Filesystem_FilesystemFileInfoStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FilesystemFileInfoStream not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemMakeDir(context.Context, *FilesystemMakeDirRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesystemMakeDir not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemCopy(context.Context, *FilesystemCopyRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesystemCopy not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemMove(context.Context, *FilesystemMoveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesystemMove not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemRemove(context.Context, *FilesystemRemoveRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesystemRemove not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemChmod(context.Context, *FilesystemChmodRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesystemChmod not implemented")
}
func (*UnimplementedFilesystemServer) FilesystemChown(context.Context, *FilesystemChownRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FilesystemChown not implemented")
}

func RegisterFilesystemServer(s *grpc.Server, srv FilesystemServer) {
	s.RegisterService(&_Filesystem_serviceDesc, srv)
}

func _Filesystem_FilesystemDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).FilesystemDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Filesystem/FilesystemDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).FilesystemDir(ctx, req.(*FilesystemDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_FilesystemDirStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilesystemDirStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServer).FilesystemDirStream(m, &filesystemFilesystemDirStreamServer{stream})
}

type Filesystem_FilesystemDirStreamServer interface {
	Send(*FilesystemDirStreamResponse) error
	grpc.ServerStream
}

type filesystemFilesystemDirStreamServer struct {
	grpc.ServerStream
}

func (x *filesystemFilesystemDirStreamServer) Send(m *FilesystemDirStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Filesystem_FilesystemFileInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemFileInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).FilesystemFileInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Filesystem/FilesystemFileInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).FilesystemFileInfo(ctx, req.(*FilesystemFileInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_FilesystemFileInfoStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilesystemFileInfoStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FilesystemServer).FilesystemFileInfoStream(m, &filesystemFilesystemFileInfoStreamServer{stream})
}

type Filesystem_FilesystemFileInfoStreamServer interface {
	Send(*FilesystemFileInfoStreamResponse) error
	grpc.ServerStream
}

type filesystemFilesystemFileInfoStreamServer struct {
	grpc.ServerStream
}

func (x *filesystemFilesystemFileInfoStreamServer) Send(m *FilesystemFileInfoStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Filesystem_FilesystemMakeDir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemMakeDirRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).FilesystemMakeDir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Filesystem/FilesystemMakeDir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).FilesystemMakeDir(ctx, req.(*FilesystemMakeDirRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_FilesystemCopy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemCopyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).FilesystemCopy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Filesystem/FilesystemCopy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).FilesystemCopy(ctx, req.(*FilesystemCopyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_FilesystemMove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemMoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).FilesystemMove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Filesystem/FilesystemMove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).FilesystemMove(ctx, req.(*FilesystemMoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_FilesystemRemove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemRemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).FilesystemRemove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Filesystem/FilesystemRemove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).FilesystemRemove(ctx, req.(*FilesystemRemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_FilesystemChmod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemChmodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).FilesystemChmod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Filesystem/FilesystemChmod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).FilesystemChmod(ctx, req.(*FilesystemChmodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Filesystem_FilesystemChown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilesystemChownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FilesystemServer).FilesystemChown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Filesystem/FilesystemChown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FilesystemServer).FilesystemChown(ctx, req.(*FilesystemChownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Filesystem_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Filesystem",
	HandlerType: (*FilesystemServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FilesystemDir",
			Handler:    _Filesystem_FilesystemDir_Handler,
		},
		{
			MethodName: "FilesystemFileInfo",
			Handler:    _Filesystem_FilesystemFileInfo_Handler,
		},
		{
			MethodName: "FilesystemMakeDir",
			Handler:    _Filesystem_FilesystemMakeDir_Handler,
		},
		{
			MethodName: "FilesystemCopy",
			Handler:    _Filesystem_FilesystemCopy_Handler,
		},
		{
			MethodName: "FilesystemMove",
			Handler:    _Filesystem_FilesystemMove_Handler,
		},
		{
			MethodName: "FilesystemRemove",
			Handler:    _Filesystem_FilesystemRemove_Handler,
		},
		{
			MethodName: "FilesystemChmod",
			Handler:    _Filesystem_FilesystemChmod_Handler,
		},
		{
			MethodName: "FilesystemChown",
			Handler:    _Filesystem_FilesystemChown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FilesystemDirStream",
			Handler:       _Filesystem_FilesystemDirStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FilesystemFileInfoStream",
			Handler:       _Filesystem_FilesystemFileInfoStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "filesystem.proto",
}
