syntax = "proto3";
package proto;
option go_package = ".;proto";

import "google/protobuf/empty.proto";

service Window {
    // get information about currently focused window
    rpc Active (google.protobuf.Empty) returns (ActiveWindowResponse);

    // stream information about currently focused window as it changes
    rpc ActiveStream (google.protobuf.Empty) returns (stream ActiveWindowStreamResponse);

    // get information about all windows
    rpc State (google.protobuf.Empty) returns (WindowStateResponse);

    // get information about windows as they change
    rpc StateStream (google.protobuf.Empty) returns (stream WindowStateStreamResponse);
}

message WindowInfo {
    string title = 1;
    string path = 2;
    int64 pid = 3; 
    int32 x = 4;
    int32 y = 5;
    int32 width = 6;
    int32 height = 7;
}

enum WindowAction {
    WINDOW_ACTION_UNKNOWN = 0; 
    WINDOW_ACTION_FOCUSED = 1;
    WINDOW_ACTION_UNFOCUSED = 2;
    WINDOW_ACTION_OPENED = 3;
    WINDOW_ACTION_CLOSED = 4;
}
// Note: New windows that open and take focus will be considered two separate actions.
// One action for opening (WINDOW_ACTION_OPENED) and one action for focusing (WINDOW_ACTION_FOCUSED).

message ActiveWindowResponse {
    WindowInfo window = 1;
}

message ActiveWindowStreamResponse {
    WindowInfo window = 1;
    string error = 15;
}

message WindowStateResponse {
    repeated WindowInfo window = 1;
}

message WindowStateStreamResponse {
    WindowInfo window = 1;
    WindowAction action = 2;
    string error = 15;
}
