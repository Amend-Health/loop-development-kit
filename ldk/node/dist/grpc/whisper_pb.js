"use strict";
// source: whisper.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();
var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
var session_pb = require('./session_pb.js');
goog.object.extend(proto, session_pb);
goog.exportSymbol('proto.proto.WhisperConfirmRequest', null, global);
goog.exportSymbol('proto.proto.WhisperConfirmResponse', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Checkbox', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Email', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.InputoneofCase', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Markdown', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Number', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Password', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Radio', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Select', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Tel', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Text', null, global);
goog.exportSymbol('proto.proto.WhisperFormInput.Time', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Checkbox', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Email', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Markdown', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Number', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.OutputoneofCase', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Password', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Radio', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Select', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Tel', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Text', null, global);
goog.exportSymbol('proto.proto.WhisperFormOutput.Time', null, global);
goog.exportSymbol('proto.proto.WhisperFormRequest', null, global);
goog.exportSymbol('proto.proto.WhisperFormResult', null, global);
goog.exportSymbol('proto.proto.WhisperFormStreamResponse', null, global);
goog.exportSymbol('proto.proto.WhisperFormStreamResponse.WhisperformresponseoneofCase', null, global);
goog.exportSymbol('proto.proto.WhisperFormUpdate', null, global);
goog.exportSymbol('proto.proto.WhisperMarkdownRequest', null, global);
goog.exportSymbol('proto.proto.WhisperMeta', null, global);
goog.exportSymbol('proto.proto.WhisperStyle', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperStyle = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperStyle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperStyle.displayName = 'proto.proto.WhisperStyle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperMeta = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperMeta.displayName = 'proto.proto.WhisperMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperMarkdownRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperMarkdownRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperMarkdownRequest.displayName = 'proto.proto.WhisperMarkdownRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperConfirmRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperConfirmRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperConfirmRequest.displayName = 'proto.proto.WhisperConfirmRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperConfirmResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperConfirmResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperConfirmResponse.displayName = 'proto.proto.WhisperConfirmResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormRequest = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormRequest.displayName = 'proto.proto.WhisperFormRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.WhisperFormInput.oneofGroups_);
};
goog.inherits(proto.proto.WhisperFormInput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.displayName = 'proto.proto.WhisperFormInput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Checkbox = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormInput.Checkbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Checkbox.displayName = 'proto.proto.WhisperFormInput.Checkbox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Email = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormInput.Email, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Email.displayName = 'proto.proto.WhisperFormInput.Email';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Markdown = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormInput.Markdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Markdown.displayName = 'proto.proto.WhisperFormInput.Markdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Number = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormInput.Number, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Number.displayName = 'proto.proto.WhisperFormInput.Number';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Password = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormInput.Password, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Password.displayName = 'proto.proto.WhisperFormInput.Password';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Radio = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.WhisperFormInput.Radio.repeatedFields_, null);
};
goog.inherits(proto.proto.WhisperFormInput.Radio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Radio.displayName = 'proto.proto.WhisperFormInput.Radio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Select = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.WhisperFormInput.Select.repeatedFields_, null);
};
goog.inherits(proto.proto.WhisperFormInput.Select, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Select.displayName = 'proto.proto.WhisperFormInput.Select';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Tel = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormInput.Tel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Tel.displayName = 'proto.proto.WhisperFormInput.Tel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Text = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormInput.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Text.displayName = 'proto.proto.WhisperFormInput.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormInput.Time = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormInput.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormInput.Time.displayName = 'proto.proto.WhisperFormInput.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.WhisperFormOutput.oneofGroups_);
};
goog.inherits(proto.proto.WhisperFormOutput, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.displayName = 'proto.proto.WhisperFormOutput';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Checkbox = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Checkbox, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Checkbox.displayName = 'proto.proto.WhisperFormOutput.Checkbox';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Email = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Email, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Email.displayName = 'proto.proto.WhisperFormOutput.Email';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Markdown = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Markdown, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Markdown.displayName = 'proto.proto.WhisperFormOutput.Markdown';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Number = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Number, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Number.displayName = 'proto.proto.WhisperFormOutput.Number';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Password = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Password, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Password.displayName = 'proto.proto.WhisperFormOutput.Password';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Radio = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Radio, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Radio.displayName = 'proto.proto.WhisperFormOutput.Radio';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Select = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Select, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Select.displayName = 'proto.proto.WhisperFormOutput.Select';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Tel = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Tel, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Tel.displayName = 'proto.proto.WhisperFormOutput.Tel';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Text = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Text.displayName = 'proto.proto.WhisperFormOutput.Text';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormOutput.Time = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormOutput.Time, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormOutput.Time.displayName = 'proto.proto.WhisperFormOutput.Time';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormResult = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormResult.displayName = 'proto.proto.WhisperFormResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormUpdate = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.WhisperFormUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormUpdate.displayName = 'proto.proto.WhisperFormUpdate';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.WhisperFormStreamResponse = function (opt_data) {
    jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.WhisperFormStreamResponse.oneofGroups_);
};
goog.inherits(proto.proto.WhisperFormStreamResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
    /**
     * @public
     * @override
     */
    proto.proto.WhisperFormStreamResponse.displayName = 'proto.proto.WhisperFormStreamResponse';
}
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperStyle.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperStyle.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperStyle} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperStyle.toObject = function (includeInstance, msg) {
        var f, obj = {
            backgroundcolor: jspb.Message.getFieldWithDefault(msg, 1, ""),
            primarycolor: jspb.Message.getFieldWithDefault(msg, 2, ""),
            highlightcolor: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperStyle}
 */
proto.proto.WhisperStyle.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperStyle;
    return proto.proto.WhisperStyle.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperStyle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperStyle}
 */
proto.proto.WhisperStyle.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setBackgroundcolor(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setPrimarycolor(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setHighlightcolor(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperStyle.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperStyle.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperStyle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperStyle.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getBackgroundcolor();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getPrimarycolor();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getHighlightcolor();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string backgroundColor = 1;
 * @return {string}
 */
proto.proto.WhisperStyle.prototype.getBackgroundcolor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperStyle} returns this
 */
proto.proto.WhisperStyle.prototype.setBackgroundcolor = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string primaryColor = 2;
 * @return {string}
 */
proto.proto.WhisperStyle.prototype.getPrimarycolor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperStyle} returns this
 */
proto.proto.WhisperStyle.prototype.setPrimarycolor = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string highlightColor = 3;
 * @return {string}
 */
proto.proto.WhisperStyle.prototype.getHighlightcolor = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperStyle} returns this
 */
proto.proto.WhisperStyle.prototype.setHighlightcolor = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperMeta.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperMeta.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperMeta} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperMeta.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            icon: jspb.Message.getFieldWithDefault(msg, 2, ""),
            style: (f = msg.getStyle()) && proto.proto.WhisperStyle.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperMeta}
 */
proto.proto.WhisperMeta.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperMeta;
    return proto.proto.WhisperMeta.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperMeta}
 */
proto.proto.WhisperMeta.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setIcon(value);
                break;
            case 3:
                var value = new proto.proto.WhisperStyle;
                reader.readMessage(value, proto.proto.WhisperStyle.deserializeBinaryFromReader);
                msg.setStyle(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperMeta.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperMeta.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperMeta.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getIcon();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getStyle();
    if (f != null) {
        writer.writeMessage(3, f, proto.proto.WhisperStyle.serializeBinaryToWriter);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperMeta.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperMeta} returns this
 */
proto.proto.WhisperMeta.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string icon = 2;
 * @return {string}
 */
proto.proto.WhisperMeta.prototype.getIcon = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperMeta} returns this
 */
proto.proto.WhisperMeta.prototype.setIcon = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional WhisperStyle style = 3;
 * @return {?proto.proto.WhisperStyle}
 */
proto.proto.WhisperMeta.prototype.getStyle = function () {
    return /** @type{?proto.proto.WhisperStyle} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperStyle, 3));
};
/**
 * @param {?proto.proto.WhisperStyle|undefined} value
 * @return {!proto.proto.WhisperMeta} returns this
*/
proto.proto.WhisperMeta.prototype.setStyle = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperMeta} returns this
 */
proto.proto.WhisperMeta.prototype.clearStyle = function () {
    return this.setStyle(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperMeta.prototype.hasStyle = function () {
    return jspb.Message.getField(this, 3) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperMarkdownRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperMarkdownRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperMarkdownRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperMarkdownRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
            meta: (f = msg.getMeta()) && proto.proto.WhisperMeta.toObject(includeInstance, f),
            markdown: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperMarkdownRequest}
 */
proto.proto.WhisperMarkdownRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperMarkdownRequest;
    return proto.proto.WhisperMarkdownRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperMarkdownRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperMarkdownRequest}
 */
proto.proto.WhisperMarkdownRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new session_pb.Session;
                reader.readMessage(value, session_pb.Session.deserializeBinaryFromReader);
                msg.setSession(value);
                break;
            case 2:
                var value = new proto.proto.WhisperMeta;
                reader.readMessage(value, proto.proto.WhisperMeta.deserializeBinaryFromReader);
                msg.setMeta(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setMarkdown(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperMarkdownRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperMarkdownRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperMarkdownRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperMarkdownRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSession();
    if (f != null) {
        writer.writeMessage(1, f, session_pb.Session.serializeBinaryToWriter);
    }
    f = message.getMeta();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.WhisperMeta.serializeBinaryToWriter);
    }
    f = message.getMarkdown();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.WhisperMarkdownRequest.prototype.getSession = function () {
    return /** @type{?proto.proto.Session} */ (jspb.Message.getWrapperField(this, session_pb.Session, 1));
};
/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.WhisperMarkdownRequest} returns this
*/
proto.proto.WhisperMarkdownRequest.prototype.setSession = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperMarkdownRequest} returns this
 */
proto.proto.WhisperMarkdownRequest.prototype.clearSession = function () {
    return this.setSession(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperMarkdownRequest.prototype.hasSession = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional WhisperMeta meta = 2;
 * @return {?proto.proto.WhisperMeta}
 */
proto.proto.WhisperMarkdownRequest.prototype.getMeta = function () {
    return /** @type{?proto.proto.WhisperMeta} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperMeta, 2));
};
/**
 * @param {?proto.proto.WhisperMeta|undefined} value
 * @return {!proto.proto.WhisperMarkdownRequest} returns this
*/
proto.proto.WhisperMarkdownRequest.prototype.setMeta = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperMarkdownRequest} returns this
 */
proto.proto.WhisperMarkdownRequest.prototype.clearMeta = function () {
    return this.setMeta(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperMarkdownRequest.prototype.hasMeta = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string markdown = 3;
 * @return {string}
 */
proto.proto.WhisperMarkdownRequest.prototype.getMarkdown = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperMarkdownRequest} returns this
 */
proto.proto.WhisperMarkdownRequest.prototype.setMarkdown = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperConfirmRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperConfirmRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperConfirmRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperConfirmRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
            meta: (f = msg.getMeta()) && proto.proto.WhisperMeta.toObject(includeInstance, f),
            markdown: jspb.Message.getFieldWithDefault(msg, 3, ""),
            rejectlabel: jspb.Message.getFieldWithDefault(msg, 4, ""),
            resolvelabel: jspb.Message.getFieldWithDefault(msg, 5, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperConfirmRequest}
 */
proto.proto.WhisperConfirmRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperConfirmRequest;
    return proto.proto.WhisperConfirmRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperConfirmRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperConfirmRequest}
 */
proto.proto.WhisperConfirmRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new session_pb.Session;
                reader.readMessage(value, session_pb.Session.deserializeBinaryFromReader);
                msg.setSession(value);
                break;
            case 2:
                var value = new proto.proto.WhisperMeta;
                reader.readMessage(value, proto.proto.WhisperMeta.deserializeBinaryFromReader);
                msg.setMeta(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setMarkdown(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setRejectlabel(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setResolvelabel(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperConfirmRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperConfirmRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperConfirmRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperConfirmRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSession();
    if (f != null) {
        writer.writeMessage(1, f, session_pb.Session.serializeBinaryToWriter);
    }
    f = message.getMeta();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.WhisperMeta.serializeBinaryToWriter);
    }
    f = message.getMarkdown();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getRejectlabel();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getResolvelabel();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
};
/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.WhisperConfirmRequest.prototype.getSession = function () {
    return /** @type{?proto.proto.Session} */ (jspb.Message.getWrapperField(this, session_pb.Session, 1));
};
/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.WhisperConfirmRequest} returns this
*/
proto.proto.WhisperConfirmRequest.prototype.setSession = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperConfirmRequest} returns this
 */
proto.proto.WhisperConfirmRequest.prototype.clearSession = function () {
    return this.setSession(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperConfirmRequest.prototype.hasSession = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional WhisperMeta meta = 2;
 * @return {?proto.proto.WhisperMeta}
 */
proto.proto.WhisperConfirmRequest.prototype.getMeta = function () {
    return /** @type{?proto.proto.WhisperMeta} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperMeta, 2));
};
/**
 * @param {?proto.proto.WhisperMeta|undefined} value
 * @return {!proto.proto.WhisperConfirmRequest} returns this
*/
proto.proto.WhisperConfirmRequest.prototype.setMeta = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperConfirmRequest} returns this
 */
proto.proto.WhisperConfirmRequest.prototype.clearMeta = function () {
    return this.setMeta(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperConfirmRequest.prototype.hasMeta = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string markdown = 3;
 * @return {string}
 */
proto.proto.WhisperConfirmRequest.prototype.getMarkdown = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperConfirmRequest} returns this
 */
proto.proto.WhisperConfirmRequest.prototype.setMarkdown = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string rejectLabel = 4;
 * @return {string}
 */
proto.proto.WhisperConfirmRequest.prototype.getRejectlabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperConfirmRequest} returns this
 */
proto.proto.WhisperConfirmRequest.prototype.setRejectlabel = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string resolveLabel = 5;
 * @return {string}
 */
proto.proto.WhisperConfirmRequest.prototype.getResolvelabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperConfirmRequest} returns this
 */
proto.proto.WhisperConfirmRequest.prototype.setResolvelabel = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperConfirmResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperConfirmResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperConfirmResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperConfirmResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            response: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperConfirmResponse}
 */
proto.proto.WhisperConfirmResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperConfirmResponse;
    return proto.proto.WhisperConfirmResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperConfirmResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperConfirmResponse}
 */
proto.proto.WhisperConfirmResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setResponse(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperConfirmResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperConfirmResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperConfirmResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperConfirmResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResponse();
    if (f) {
        writer.writeBool(1, f);
    }
};
/**
 * optional bool response = 1;
 * @return {boolean}
 */
proto.proto.WhisperConfirmResponse.prototype.getResponse = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.WhisperConfirmResponse} returns this
 */
proto.proto.WhisperConfirmResponse.prototype.setResponse = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormRequest.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormRequest.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormRequest} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormRequest.toObject = function (includeInstance, msg) {
        var f, obj = {
            session: (f = msg.getSession()) && session_pb.Session.toObject(includeInstance, f),
            meta: (f = msg.getMeta()) && proto.proto.WhisperMeta.toObject(includeInstance, f),
            markdown: jspb.Message.getFieldWithDefault(msg, 3, ""),
            submitlabel: jspb.Message.getFieldWithDefault(msg, 4, ""),
            cancellabel: jspb.Message.getFieldWithDefault(msg, 5, ""),
            inputsMap: (f = msg.getInputsMap()) ? f.toObject(includeInstance, proto.proto.WhisperFormInput.toObject) : []
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormRequest}
 */
proto.proto.WhisperFormRequest.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormRequest;
    return proto.proto.WhisperFormRequest.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormRequest}
 */
proto.proto.WhisperFormRequest.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new session_pb.Session;
                reader.readMessage(value, session_pb.Session.deserializeBinaryFromReader);
                msg.setSession(value);
                break;
            case 2:
                var value = new proto.proto.WhisperMeta;
                reader.readMessage(value, proto.proto.WhisperMeta.deserializeBinaryFromReader);
                msg.setMeta(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setMarkdown(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setSubmitlabel(value);
                break;
            case 5:
                var value = /** @type {string} */ (reader.readString());
                msg.setCancellabel(value);
                break;
            case 6:
                var value = msg.getInputsMap();
                reader.readMessage(value, function (message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.WhisperFormInput.deserializeBinaryFromReader, "", new proto.proto.WhisperFormInput());
                });
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormRequest.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormRequest.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormRequest.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSession();
    if (f != null) {
        writer.writeMessage(1, f, session_pb.Session.serializeBinaryToWriter);
    }
    f = message.getMeta();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.WhisperMeta.serializeBinaryToWriter);
    }
    f = message.getMarkdown();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getSubmitlabel();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
    f = message.getCancellabel();
    if (f.length > 0) {
        writer.writeString(5, f);
    }
    f = message.getInputsMap(true);
    if (f && f.getLength() > 0) {
        f.serializeBinary(6, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.WhisperFormInput.serializeBinaryToWriter);
    }
};
/**
 * optional Session session = 1;
 * @return {?proto.proto.Session}
 */
proto.proto.WhisperFormRequest.prototype.getSession = function () {
    return /** @type{?proto.proto.Session} */ (jspb.Message.getWrapperField(this, session_pb.Session, 1));
};
/**
 * @param {?proto.proto.Session|undefined} value
 * @return {!proto.proto.WhisperFormRequest} returns this
*/
proto.proto.WhisperFormRequest.prototype.setSession = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormRequest} returns this
 */
proto.proto.WhisperFormRequest.prototype.clearSession = function () {
    return this.setSession(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormRequest.prototype.hasSession = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional WhisperMeta meta = 2;
 * @return {?proto.proto.WhisperMeta}
 */
proto.proto.WhisperFormRequest.prototype.getMeta = function () {
    return /** @type{?proto.proto.WhisperMeta} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperMeta, 2));
};
/**
 * @param {?proto.proto.WhisperMeta|undefined} value
 * @return {!proto.proto.WhisperFormRequest} returns this
*/
proto.proto.WhisperFormRequest.prototype.setMeta = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormRequest} returns this
 */
proto.proto.WhisperFormRequest.prototype.clearMeta = function () {
    return this.setMeta(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormRequest.prototype.hasMeta = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string markdown = 3;
 * @return {string}
 */
proto.proto.WhisperFormRequest.prototype.getMarkdown = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormRequest} returns this
 */
proto.proto.WhisperFormRequest.prototype.setMarkdown = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string submitLabel = 4;
 * @return {string}
 */
proto.proto.WhisperFormRequest.prototype.getSubmitlabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormRequest} returns this
 */
proto.proto.WhisperFormRequest.prototype.setSubmitlabel = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
/**
 * optional string cancelLabel = 5;
 * @return {string}
 */
proto.proto.WhisperFormRequest.prototype.getCancellabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormRequest} returns this
 */
proto.proto.WhisperFormRequest.prototype.setCancellabel = function (value) {
    return jspb.Message.setProto3StringField(this, 5, value);
};
/**
 * map<string, WhisperFormInput> inputs = 6;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.WhisperFormInput>}
 */
proto.proto.WhisperFormRequest.prototype.getInputsMap = function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.proto.WhisperFormInput>} */ (jspb.Message.getMapField(this, 6, opt_noLazyCreate, proto.proto.WhisperFormInput));
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.WhisperFormRequest} returns this
 */
proto.proto.WhisperFormRequest.prototype.clearInputsMap = function () {
    this.getInputsMap().clear();
    return this;
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.WhisperFormInput.oneofGroups_ = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];
/**
 * @enum {number}
 */
proto.proto.WhisperFormInput.InputoneofCase = {
    INPUTONEOF_NOT_SET: 0,
    CHECKBOX: 1,
    EMAIL: 2,
    MARKDOWN: 3,
    NUMBER: 4,
    PASSWORD: 5,
    RADIO: 6,
    SELECT: 7,
    TEL: 8,
    TEXT: 9,
    TIME: 10
};
/**
 * @return {proto.proto.WhisperFormInput.InputoneofCase}
 */
proto.proto.WhisperFormInput.prototype.getInputoneofCase = function () {
    return /** @type {proto.proto.WhisperFormInput.InputoneofCase} */ (jspb.Message.computeOneofCase(this, proto.proto.WhisperFormInput.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.toObject = function (includeInstance, msg) {
        var f, obj = {
            checkbox: (f = msg.getCheckbox()) && proto.proto.WhisperFormInput.Checkbox.toObject(includeInstance, f),
            email: (f = msg.getEmail()) && proto.proto.WhisperFormInput.Email.toObject(includeInstance, f),
            markdown: (f = msg.getMarkdown()) && proto.proto.WhisperFormInput.Markdown.toObject(includeInstance, f),
            number: (f = msg.getNumber()) && proto.proto.WhisperFormInput.Number.toObject(includeInstance, f),
            password: (f = msg.getPassword()) && proto.proto.WhisperFormInput.Password.toObject(includeInstance, f),
            radio: (f = msg.getRadio()) && proto.proto.WhisperFormInput.Radio.toObject(includeInstance, f),
            select: (f = msg.getSelect()) && proto.proto.WhisperFormInput.Select.toObject(includeInstance, f),
            tel: (f = msg.getTel()) && proto.proto.WhisperFormInput.Tel.toObject(includeInstance, f),
            text: (f = msg.getText()) && proto.proto.WhisperFormInput.Text.toObject(includeInstance, f),
            time: (f = msg.getTime()) && proto.proto.WhisperFormInput.Time.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput}
 */
proto.proto.WhisperFormInput.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput;
    return proto.proto.WhisperFormInput.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput}
 */
proto.proto.WhisperFormInput.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.WhisperFormInput.Checkbox;
                reader.readMessage(value, proto.proto.WhisperFormInput.Checkbox.deserializeBinaryFromReader);
                msg.setCheckbox(value);
                break;
            case 2:
                var value = new proto.proto.WhisperFormInput.Email;
                reader.readMessage(value, proto.proto.WhisperFormInput.Email.deserializeBinaryFromReader);
                msg.setEmail(value);
                break;
            case 3:
                var value = new proto.proto.WhisperFormInput.Markdown;
                reader.readMessage(value, proto.proto.WhisperFormInput.Markdown.deserializeBinaryFromReader);
                msg.setMarkdown(value);
                break;
            case 4:
                var value = new proto.proto.WhisperFormInput.Number;
                reader.readMessage(value, proto.proto.WhisperFormInput.Number.deserializeBinaryFromReader);
                msg.setNumber(value);
                break;
            case 5:
                var value = new proto.proto.WhisperFormInput.Password;
                reader.readMessage(value, proto.proto.WhisperFormInput.Password.deserializeBinaryFromReader);
                msg.setPassword(value);
                break;
            case 6:
                var value = new proto.proto.WhisperFormInput.Radio;
                reader.readMessage(value, proto.proto.WhisperFormInput.Radio.deserializeBinaryFromReader);
                msg.setRadio(value);
                break;
            case 7:
                var value = new proto.proto.WhisperFormInput.Select;
                reader.readMessage(value, proto.proto.WhisperFormInput.Select.deserializeBinaryFromReader);
                msg.setSelect(value);
                break;
            case 8:
                var value = new proto.proto.WhisperFormInput.Tel;
                reader.readMessage(value, proto.proto.WhisperFormInput.Tel.deserializeBinaryFromReader);
                msg.setTel(value);
                break;
            case 9:
                var value = new proto.proto.WhisperFormInput.Text;
                reader.readMessage(value, proto.proto.WhisperFormInput.Text.deserializeBinaryFromReader);
                msg.setText(value);
                break;
            case 10:
                var value = new proto.proto.WhisperFormInput.Time;
                reader.readMessage(value, proto.proto.WhisperFormInput.Time.deserializeBinaryFromReader);
                msg.setTime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCheckbox();
    if (f != null) {
        writer.writeMessage(1, f, proto.proto.WhisperFormInput.Checkbox.serializeBinaryToWriter);
    }
    f = message.getEmail();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.WhisperFormInput.Email.serializeBinaryToWriter);
    }
    f = message.getMarkdown();
    if (f != null) {
        writer.writeMessage(3, f, proto.proto.WhisperFormInput.Markdown.serializeBinaryToWriter);
    }
    f = message.getNumber();
    if (f != null) {
        writer.writeMessage(4, f, proto.proto.WhisperFormInput.Number.serializeBinaryToWriter);
    }
    f = message.getPassword();
    if (f != null) {
        writer.writeMessage(5, f, proto.proto.WhisperFormInput.Password.serializeBinaryToWriter);
    }
    f = message.getRadio();
    if (f != null) {
        writer.writeMessage(6, f, proto.proto.WhisperFormInput.Radio.serializeBinaryToWriter);
    }
    f = message.getSelect();
    if (f != null) {
        writer.writeMessage(7, f, proto.proto.WhisperFormInput.Select.serializeBinaryToWriter);
    }
    f = message.getTel();
    if (f != null) {
        writer.writeMessage(8, f, proto.proto.WhisperFormInput.Tel.serializeBinaryToWriter);
    }
    f = message.getText();
    if (f != null) {
        writer.writeMessage(9, f, proto.proto.WhisperFormInput.Text.serializeBinaryToWriter);
    }
    f = message.getTime();
    if (f != null) {
        writer.writeMessage(10, f, proto.proto.WhisperFormInput.Time.serializeBinaryToWriter);
    }
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Checkbox.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Checkbox.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Checkbox} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Checkbox.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Checkbox}
 */
proto.proto.WhisperFormInput.Checkbox.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Checkbox;
    return proto.proto.WhisperFormInput.Checkbox.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Checkbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Checkbox}
 */
proto.proto.WhisperFormInput.Checkbox.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Checkbox.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Checkbox.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Checkbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Checkbox.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f) {
        writer.writeBool(3, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Checkbox.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Checkbox} returns this
 */
proto.proto.WhisperFormInput.Checkbox.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Checkbox.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Checkbox} returns this
 */
proto.proto.WhisperFormInput.Checkbox.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional bool value = 3;
 * @return {boolean}
 */
proto.proto.WhisperFormInput.Checkbox.prototype.getValue = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.WhisperFormInput.Checkbox} returns this
 */
proto.proto.WhisperFormInput.Checkbox.prototype.setValue = function (value) {
    return jspb.Message.setProto3BooleanField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Email.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Email.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Email} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Email.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Email}
 */
proto.proto.WhisperFormInput.Email.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Email;
    return proto.proto.WhisperFormInput.Email.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Email} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Email}
 */
proto.proto.WhisperFormInput.Email.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Email.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Email.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Email} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Email.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Email.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Email} returns this
 */
proto.proto.WhisperFormInput.Email.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Email.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Email} returns this
 */
proto.proto.WhisperFormInput.Email.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.proto.WhisperFormInput.Email.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Email} returns this
 */
proto.proto.WhisperFormInput.Email.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Markdown.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Markdown.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Markdown} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Markdown.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Markdown}
 */
proto.proto.WhisperFormInput.Markdown.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Markdown;
    return proto.proto.WhisperFormInput.Markdown.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Markdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Markdown}
 */
proto.proto.WhisperFormInput.Markdown.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Markdown.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Markdown.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Markdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Markdown.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Markdown.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Markdown} returns this
 */
proto.proto.WhisperFormInput.Markdown.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Markdown.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Markdown} returns this
 */
proto.proto.WhisperFormInput.Markdown.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.proto.WhisperFormInput.Markdown.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Markdown} returns this
 */
proto.proto.WhisperFormInput.Markdown.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Number.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Number.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Number} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Number.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
            min: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
            max: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Number}
 */
proto.proto.WhisperFormInput.Number.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Number;
    return proto.proto.WhisperFormInput.Number.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Number} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Number}
 */
proto.proto.WhisperFormInput.Number.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = /** @type {number} */ (reader.readFloat());
                msg.setValue(value);
                break;
            case 4:
                var value = /** @type {number} */ (reader.readFloat());
                msg.setMin(value);
                break;
            case 5:
                var value = /** @type {number} */ (reader.readFloat());
                msg.setMax(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Number.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Number.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Number} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Number.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f !== 0.0) {
        writer.writeFloat(3, f);
    }
    f = message.getMin();
    if (f !== 0.0) {
        writer.writeFloat(4, f);
    }
    f = message.getMax();
    if (f !== 0.0) {
        writer.writeFloat(5, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Number.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Number} returns this
 */
proto.proto.WhisperFormInput.Number.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Number.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Number} returns this
 */
proto.proto.WhisperFormInput.Number.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional float value = 3;
 * @return {number}
 */
proto.proto.WhisperFormInput.Number.prototype.getValue = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WhisperFormInput.Number} returns this
 */
proto.proto.WhisperFormInput.Number.prototype.setValue = function (value) {
    return jspb.Message.setProto3FloatField(this, 3, value);
};
/**
 * optional float min = 4;
 * @return {number}
 */
proto.proto.WhisperFormInput.Number.prototype.getMin = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WhisperFormInput.Number} returns this
 */
proto.proto.WhisperFormInput.Number.prototype.setMin = function (value) {
    return jspb.Message.setProto3FloatField(this, 4, value);
};
/**
 * optional float max = 5;
 * @return {number}
 */
proto.proto.WhisperFormInput.Number.prototype.getMax = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WhisperFormInput.Number} returns this
 */
proto.proto.WhisperFormInput.Number.prototype.setMax = function (value) {
    return jspb.Message.setProto3FloatField(this, 5, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Password.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Password.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Password} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Password.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Password}
 */
proto.proto.WhisperFormInput.Password.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Password;
    return proto.proto.WhisperFormInput.Password.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Password} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Password}
 */
proto.proto.WhisperFormInput.Password.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Password.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Password.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Password} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Password.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Password.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Password} returns this
 */
proto.proto.WhisperFormInput.Password.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Password.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Password} returns this
 */
proto.proto.WhisperFormInput.Password.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.WhisperFormInput.Radio.repeatedFields_ = [3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Radio.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Radio.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Radio} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Radio.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            optionsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Radio}
 */
proto.proto.WhisperFormInput.Radio.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Radio;
    return proto.proto.WhisperFormInput.Radio.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Radio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Radio}
 */
proto.proto.WhisperFormInput.Radio.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.addOptions(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Radio.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Radio.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Radio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Radio.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getOptionsList();
    if (f.length > 0) {
        writer.writeRepeatedString(3, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Radio.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Radio} returns this
 */
proto.proto.WhisperFormInput.Radio.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Radio.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Radio} returns this
 */
proto.proto.WhisperFormInput.Radio.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * repeated string options = 3;
 * @return {!Array<string>}
 */
proto.proto.WhisperFormInput.Radio.prototype.getOptionsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.proto.WhisperFormInput.Radio} returns this
 */
proto.proto.WhisperFormInput.Radio.prototype.setOptionsList = function (value) {
    return jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.WhisperFormInput.Radio} returns this
 */
proto.proto.WhisperFormInput.Radio.prototype.addOptions = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.WhisperFormInput.Radio} returns this
 */
proto.proto.WhisperFormInput.Radio.prototype.clearOptionsList = function () {
    return this.setOptionsList([]);
};
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.WhisperFormInput.Select.repeatedFields_ = [3];
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Select.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Select.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Select} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Select.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            optionsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Select}
 */
proto.proto.WhisperFormInput.Select.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Select;
    return proto.proto.WhisperFormInput.Select.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Select} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Select}
 */
proto.proto.WhisperFormInput.Select.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.addOptions(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Select.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Select.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Select} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Select.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getOptionsList();
    if (f.length > 0) {
        writer.writeRepeatedString(3, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Select.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Select} returns this
 */
proto.proto.WhisperFormInput.Select.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Select.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Select} returns this
 */
proto.proto.WhisperFormInput.Select.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * repeated string options = 3;
 * @return {!Array<string>}
 */
proto.proto.WhisperFormInput.Select.prototype.getOptionsList = function () {
    return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};
/**
 * @param {!Array<string>} value
 * @return {!proto.proto.WhisperFormInput.Select} returns this
 */
proto.proto.WhisperFormInput.Select.prototype.setOptionsList = function (value) {
    return jspb.Message.setField(this, 3, value || []);
};
/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.proto.WhisperFormInput.Select} returns this
 */
proto.proto.WhisperFormInput.Select.prototype.addOptions = function (value, opt_index) {
    return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};
/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.WhisperFormInput.Select} returns this
 */
proto.proto.WhisperFormInput.Select.prototype.clearOptionsList = function () {
    return this.setOptionsList([]);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Tel.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Tel.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Tel} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Tel.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: jspb.Message.getFieldWithDefault(msg, 3, ""),
            pattern: jspb.Message.getFieldWithDefault(msg, 4, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Tel}
 */
proto.proto.WhisperFormInput.Tel.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Tel;
    return proto.proto.WhisperFormInput.Tel.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Tel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Tel}
 */
proto.proto.WhisperFormInput.Tel.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            case 4:
                var value = /** @type {string} */ (reader.readString());
                msg.setPattern(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Tel.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Tel.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Tel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Tel.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
    f = message.getPattern();
    if (f.length > 0) {
        writer.writeString(4, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Tel.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Tel} returns this
 */
proto.proto.WhisperFormInput.Tel.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Tel.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Tel} returns this
 */
proto.proto.WhisperFormInput.Tel.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.proto.WhisperFormInput.Tel.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Tel} returns this
 */
proto.proto.WhisperFormInput.Tel.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
/**
 * optional string pattern = 4;
 * @return {string}
 */
proto.proto.WhisperFormInput.Tel.prototype.getPattern = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Tel} returns this
 */
proto.proto.WhisperFormInput.Tel.prototype.setPattern = function (value) {
    return jspb.Message.setProto3StringField(this, 4, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Text.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Text.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Text} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Text.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: jspb.Message.getFieldWithDefault(msg, 3, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Text}
 */
proto.proto.WhisperFormInput.Text.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Text;
    return proto.proto.WhisperFormInput.Text.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Text}
 */
proto.proto.WhisperFormInput.Text.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Text.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Text.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Text.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(3, f);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Text.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Text} returns this
 */
proto.proto.WhisperFormInput.Text.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Text.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Text} returns this
 */
proto.proto.WhisperFormInput.Text.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional string value = 3;
 * @return {string}
 */
proto.proto.WhisperFormInput.Text.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Text} returns this
 */
proto.proto.WhisperFormInput.Text.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 3, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormInput.Time.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormInput.Time.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormInput.Time} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormInput.Time.toObject = function (includeInstance, msg) {
        var f, obj = {
            label: jspb.Message.getFieldWithDefault(msg, 1, ""),
            tooltip: jspb.Message.getFieldWithDefault(msg, 2, ""),
            value: (f = msg.getValue()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormInput.Time}
 */
proto.proto.WhisperFormInput.Time.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormInput.Time;
    return proto.proto.WhisperFormInput.Time.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormInput.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormInput.Time}
 */
proto.proto.WhisperFormInput.Time.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setLabel(value);
                break;
            case 2:
                var value = /** @type {string} */ (reader.readString());
                msg.setTooltip(value);
                break;
            case 3:
                var value = new google_protobuf_timestamp_pb.Timestamp;
                reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormInput.Time.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormInput.Time.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormInput.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormInput.Time.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getLabel();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getTooltip();
    if (f.length > 0) {
        writer.writeString(2, f);
    }
    f = message.getValue();
    if (f != null) {
        writer.writeMessage(3, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
    }
};
/**
 * optional string label = 1;
 * @return {string}
 */
proto.proto.WhisperFormInput.Time.prototype.getLabel = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Time} returns this
 */
proto.proto.WhisperFormInput.Time.prototype.setLabel = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional string tooltip = 2;
 * @return {string}
 */
proto.proto.WhisperFormInput.Time.prototype.getTooltip = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormInput.Time} returns this
 */
proto.proto.WhisperFormInput.Time.prototype.setTooltip = function (value) {
    return jspb.Message.setProto3StringField(this, 2, value);
};
/**
 * optional google.protobuf.Timestamp value = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.proto.WhisperFormInput.Time.prototype.getValue = function () {
    return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};
/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.proto.WhisperFormInput.Time} returns this
*/
proto.proto.WhisperFormInput.Time.prototype.setValue = function (value) {
    return jspb.Message.setWrapperField(this, 3, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput.Time} returns this
 */
proto.proto.WhisperFormInput.Time.prototype.clearValue = function () {
    return this.setValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.Time.prototype.hasValue = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional Checkbox checkbox = 1;
 * @return {?proto.proto.WhisperFormInput.Checkbox}
 */
proto.proto.WhisperFormInput.prototype.getCheckbox = function () {
    return /** @type{?proto.proto.WhisperFormInput.Checkbox} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Checkbox, 1));
};
/**
 * @param {?proto.proto.WhisperFormInput.Checkbox|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setCheckbox = function (value) {
    return jspb.Message.setOneofWrapperField(this, 1, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearCheckbox = function () {
    return this.setCheckbox(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasCheckbox = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Email email = 2;
 * @return {?proto.proto.WhisperFormInput.Email}
 */
proto.proto.WhisperFormInput.prototype.getEmail = function () {
    return /** @type{?proto.proto.WhisperFormInput.Email} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Email, 2));
};
/**
 * @param {?proto.proto.WhisperFormInput.Email|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setEmail = function (value) {
    return jspb.Message.setOneofWrapperField(this, 2, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearEmail = function () {
    return this.setEmail(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasEmail = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional Markdown markdown = 3;
 * @return {?proto.proto.WhisperFormInput.Markdown}
 */
proto.proto.WhisperFormInput.prototype.getMarkdown = function () {
    return /** @type{?proto.proto.WhisperFormInput.Markdown} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Markdown, 3));
};
/**
 * @param {?proto.proto.WhisperFormInput.Markdown|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setMarkdown = function (value) {
    return jspb.Message.setOneofWrapperField(this, 3, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearMarkdown = function () {
    return this.setMarkdown(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasMarkdown = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional Number number = 4;
 * @return {?proto.proto.WhisperFormInput.Number}
 */
proto.proto.WhisperFormInput.prototype.getNumber = function () {
    return /** @type{?proto.proto.WhisperFormInput.Number} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Number, 4));
};
/**
 * @param {?proto.proto.WhisperFormInput.Number|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setNumber = function (value) {
    return jspb.Message.setOneofWrapperField(this, 4, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearNumber = function () {
    return this.setNumber(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasNumber = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional Password password = 5;
 * @return {?proto.proto.WhisperFormInput.Password}
 */
proto.proto.WhisperFormInput.prototype.getPassword = function () {
    return /** @type{?proto.proto.WhisperFormInput.Password} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Password, 5));
};
/**
 * @param {?proto.proto.WhisperFormInput.Password|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setPassword = function (value) {
    return jspb.Message.setOneofWrapperField(this, 5, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearPassword = function () {
    return this.setPassword(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasPassword = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional Radio radio = 6;
 * @return {?proto.proto.WhisperFormInput.Radio}
 */
proto.proto.WhisperFormInput.prototype.getRadio = function () {
    return /** @type{?proto.proto.WhisperFormInput.Radio} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Radio, 6));
};
/**
 * @param {?proto.proto.WhisperFormInput.Radio|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setRadio = function (value) {
    return jspb.Message.setOneofWrapperField(this, 6, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearRadio = function () {
    return this.setRadio(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasRadio = function () {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional Select select = 7;
 * @return {?proto.proto.WhisperFormInput.Select}
 */
proto.proto.WhisperFormInput.prototype.getSelect = function () {
    return /** @type{?proto.proto.WhisperFormInput.Select} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Select, 7));
};
/**
 * @param {?proto.proto.WhisperFormInput.Select|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setSelect = function (value) {
    return jspb.Message.setOneofWrapperField(this, 7, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearSelect = function () {
    return this.setSelect(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasSelect = function () {
    return jspb.Message.getField(this, 7) != null;
};
/**
 * optional Tel tel = 8;
 * @return {?proto.proto.WhisperFormInput.Tel}
 */
proto.proto.WhisperFormInput.prototype.getTel = function () {
    return /** @type{?proto.proto.WhisperFormInput.Tel} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Tel, 8));
};
/**
 * @param {?proto.proto.WhisperFormInput.Tel|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setTel = function (value) {
    return jspb.Message.setOneofWrapperField(this, 8, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearTel = function () {
    return this.setTel(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasTel = function () {
    return jspb.Message.getField(this, 8) != null;
};
/**
 * optional Text text = 9;
 * @return {?proto.proto.WhisperFormInput.Text}
 */
proto.proto.WhisperFormInput.prototype.getText = function () {
    return /** @type{?proto.proto.WhisperFormInput.Text} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Text, 9));
};
/**
 * @param {?proto.proto.WhisperFormInput.Text|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setText = function (value) {
    return jspb.Message.setOneofWrapperField(this, 9, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearText = function () {
    return this.setText(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasText = function () {
    return jspb.Message.getField(this, 9) != null;
};
/**
 * optional Time time = 10;
 * @return {?proto.proto.WhisperFormInput.Time}
 */
proto.proto.WhisperFormInput.prototype.getTime = function () {
    return /** @type{?proto.proto.WhisperFormInput.Time} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormInput.Time, 10));
};
/**
 * @param {?proto.proto.WhisperFormInput.Time|undefined} value
 * @return {!proto.proto.WhisperFormInput} returns this
*/
proto.proto.WhisperFormInput.prototype.setTime = function (value) {
    return jspb.Message.setOneofWrapperField(this, 10, proto.proto.WhisperFormInput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormInput} returns this
 */
proto.proto.WhisperFormInput.prototype.clearTime = function () {
    return this.setTime(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormInput.prototype.hasTime = function () {
    return jspb.Message.getField(this, 10) != null;
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.WhisperFormOutput.oneofGroups_ = [[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]];
/**
 * @enum {number}
 */
proto.proto.WhisperFormOutput.OutputoneofCase = {
    OUTPUTONEOF_NOT_SET: 0,
    CHECKBOX: 1,
    EMAIL: 2,
    MARKDOWN: 3,
    NUMBER: 4,
    PASSWORD: 5,
    RADIO: 6,
    SELECT: 7,
    TEL: 8,
    TEXT: 9,
    TIME: 10
};
/**
 * @return {proto.proto.WhisperFormOutput.OutputoneofCase}
 */
proto.proto.WhisperFormOutput.prototype.getOutputoneofCase = function () {
    return /** @type {proto.proto.WhisperFormOutput.OutputoneofCase} */ (jspb.Message.computeOneofCase(this, proto.proto.WhisperFormOutput.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.toObject = function (includeInstance, msg) {
        var f, obj = {
            checkbox: (f = msg.getCheckbox()) && proto.proto.WhisperFormOutput.Checkbox.toObject(includeInstance, f),
            email: (f = msg.getEmail()) && proto.proto.WhisperFormOutput.Email.toObject(includeInstance, f),
            markdown: (f = msg.getMarkdown()) && proto.proto.WhisperFormOutput.Markdown.toObject(includeInstance, f),
            number: (f = msg.getNumber()) && proto.proto.WhisperFormOutput.Number.toObject(includeInstance, f),
            password: (f = msg.getPassword()) && proto.proto.WhisperFormOutput.Password.toObject(includeInstance, f),
            radio: (f = msg.getRadio()) && proto.proto.WhisperFormOutput.Radio.toObject(includeInstance, f),
            select: (f = msg.getSelect()) && proto.proto.WhisperFormOutput.Select.toObject(includeInstance, f),
            tel: (f = msg.getTel()) && proto.proto.WhisperFormOutput.Tel.toObject(includeInstance, f),
            text: (f = msg.getText()) && proto.proto.WhisperFormOutput.Text.toObject(includeInstance, f),
            time: (f = msg.getTime()) && proto.proto.WhisperFormOutput.Time.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput}
 */
proto.proto.WhisperFormOutput.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput;
    return proto.proto.WhisperFormOutput.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput}
 */
proto.proto.WhisperFormOutput.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.WhisperFormOutput.Checkbox;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Checkbox.deserializeBinaryFromReader);
                msg.setCheckbox(value);
                break;
            case 2:
                var value = new proto.proto.WhisperFormOutput.Email;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Email.deserializeBinaryFromReader);
                msg.setEmail(value);
                break;
            case 3:
                var value = new proto.proto.WhisperFormOutput.Markdown;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Markdown.deserializeBinaryFromReader);
                msg.setMarkdown(value);
                break;
            case 4:
                var value = new proto.proto.WhisperFormOutput.Number;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Number.deserializeBinaryFromReader);
                msg.setNumber(value);
                break;
            case 5:
                var value = new proto.proto.WhisperFormOutput.Password;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Password.deserializeBinaryFromReader);
                msg.setPassword(value);
                break;
            case 6:
                var value = new proto.proto.WhisperFormOutput.Radio;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Radio.deserializeBinaryFromReader);
                msg.setRadio(value);
                break;
            case 7:
                var value = new proto.proto.WhisperFormOutput.Select;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Select.deserializeBinaryFromReader);
                msg.setSelect(value);
                break;
            case 8:
                var value = new proto.proto.WhisperFormOutput.Tel;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Tel.deserializeBinaryFromReader);
                msg.setTel(value);
                break;
            case 9:
                var value = new proto.proto.WhisperFormOutput.Text;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Text.deserializeBinaryFromReader);
                msg.setText(value);
                break;
            case 10:
                var value = new proto.proto.WhisperFormOutput.Time;
                reader.readMessage(value, proto.proto.WhisperFormOutput.Time.deserializeBinaryFromReader);
                msg.setTime(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getCheckbox();
    if (f != null) {
        writer.writeMessage(1, f, proto.proto.WhisperFormOutput.Checkbox.serializeBinaryToWriter);
    }
    f = message.getEmail();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.WhisperFormOutput.Email.serializeBinaryToWriter);
    }
    f = message.getMarkdown();
    if (f != null) {
        writer.writeMessage(3, f, proto.proto.WhisperFormOutput.Markdown.serializeBinaryToWriter);
    }
    f = message.getNumber();
    if (f != null) {
        writer.writeMessage(4, f, proto.proto.WhisperFormOutput.Number.serializeBinaryToWriter);
    }
    f = message.getPassword();
    if (f != null) {
        writer.writeMessage(5, f, proto.proto.WhisperFormOutput.Password.serializeBinaryToWriter);
    }
    f = message.getRadio();
    if (f != null) {
        writer.writeMessage(6, f, proto.proto.WhisperFormOutput.Radio.serializeBinaryToWriter);
    }
    f = message.getSelect();
    if (f != null) {
        writer.writeMessage(7, f, proto.proto.WhisperFormOutput.Select.serializeBinaryToWriter);
    }
    f = message.getTel();
    if (f != null) {
        writer.writeMessage(8, f, proto.proto.WhisperFormOutput.Tel.serializeBinaryToWriter);
    }
    f = message.getText();
    if (f != null) {
        writer.writeMessage(9, f, proto.proto.WhisperFormOutput.Text.serializeBinaryToWriter);
    }
    f = message.getTime();
    if (f != null) {
        writer.writeMessage(10, f, proto.proto.WhisperFormOutput.Time.serializeBinaryToWriter);
    }
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Checkbox.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Checkbox.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Checkbox} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Checkbox.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Checkbox}
 */
proto.proto.WhisperFormOutput.Checkbox.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Checkbox;
    return proto.proto.WhisperFormOutput.Checkbox.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Checkbox} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Checkbox}
 */
proto.proto.WhisperFormOutput.Checkbox.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Checkbox.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Checkbox.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Checkbox} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Checkbox.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f) {
        writer.writeBool(1, f);
    }
};
/**
 * optional bool value = 1;
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.Checkbox.prototype.getValue = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.WhisperFormOutput.Checkbox} returns this
 */
proto.proto.WhisperFormOutput.Checkbox.prototype.setValue = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Email.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Email.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Email} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Email.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Email}
 */
proto.proto.WhisperFormOutput.Email.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Email;
    return proto.proto.WhisperFormOutput.Email.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Email} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Email}
 */
proto.proto.WhisperFormOutput.Email.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Email.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Email.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Email} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Email.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string value = 1;
 * @return {string}
 */
proto.proto.WhisperFormOutput.Email.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormOutput.Email} returns this
 */
proto.proto.WhisperFormOutput.Email.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Markdown.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Markdown.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Markdown} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Markdown.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Markdown}
 */
proto.proto.WhisperFormOutput.Markdown.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Markdown;
    return proto.proto.WhisperFormOutput.Markdown.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Markdown} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Markdown}
 */
proto.proto.WhisperFormOutput.Markdown.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Markdown.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Markdown.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Markdown} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Markdown.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string value = 1;
 * @return {string}
 */
proto.proto.WhisperFormOutput.Markdown.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormOutput.Markdown} returns this
 */
proto.proto.WhisperFormOutput.Markdown.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Number.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Number.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Number} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Number.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Number}
 */
proto.proto.WhisperFormOutput.Number.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Number;
    return proto.proto.WhisperFormOutput.Number.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Number} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Number}
 */
proto.proto.WhisperFormOutput.Number.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {number} */ (reader.readFloat());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Number.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Number.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Number} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Number.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f !== 0.0) {
        writer.writeFloat(1, f);
    }
};
/**
 * optional float value = 1;
 * @return {number}
 */
proto.proto.WhisperFormOutput.Number.prototype.getValue = function () {
    return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};
/**
 * @param {number} value
 * @return {!proto.proto.WhisperFormOutput.Number} returns this
 */
proto.proto.WhisperFormOutput.Number.prototype.setValue = function (value) {
    return jspb.Message.setProto3FloatField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Password.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Password.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Password} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Password.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Password}
 */
proto.proto.WhisperFormOutput.Password.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Password;
    return proto.proto.WhisperFormOutput.Password.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Password} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Password}
 */
proto.proto.WhisperFormOutput.Password.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Password.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Password.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Password} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Password.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string value = 1;
 * @return {string}
 */
proto.proto.WhisperFormOutput.Password.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormOutput.Password} returns this
 */
proto.proto.WhisperFormOutput.Password.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Radio.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Radio.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Radio} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Radio.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Radio}
 */
proto.proto.WhisperFormOutput.Radio.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Radio;
    return proto.proto.WhisperFormOutput.Radio.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Radio} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Radio}
 */
proto.proto.WhisperFormOutput.Radio.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Radio.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Radio.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Radio} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Radio.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string value = 1;
 * @return {string}
 */
proto.proto.WhisperFormOutput.Radio.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormOutput.Radio} returns this
 */
proto.proto.WhisperFormOutput.Radio.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Select.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Select.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Select} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Select.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Select}
 */
proto.proto.WhisperFormOutput.Select.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Select;
    return proto.proto.WhisperFormOutput.Select.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Select} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Select}
 */
proto.proto.WhisperFormOutput.Select.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Select.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Select.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Select} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Select.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string value = 1;
 * @return {string}
 */
proto.proto.WhisperFormOutput.Select.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormOutput.Select} returns this
 */
proto.proto.WhisperFormOutput.Select.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Tel.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Tel.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Tel} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Tel.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Tel}
 */
proto.proto.WhisperFormOutput.Tel.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Tel;
    return proto.proto.WhisperFormOutput.Tel.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Tel} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Tel}
 */
proto.proto.WhisperFormOutput.Tel.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Tel.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Tel.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Tel} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Tel.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string value = 1;
 * @return {string}
 */
proto.proto.WhisperFormOutput.Tel.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormOutput.Tel} returns this
 */
proto.proto.WhisperFormOutput.Tel.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Text.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Text.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Text} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Text.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: jspb.Message.getFieldWithDefault(msg, 1, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Text}
 */
proto.proto.WhisperFormOutput.Text.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Text;
    return proto.proto.WhisperFormOutput.Text.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Text}
 */
proto.proto.WhisperFormOutput.Text.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Text.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Text.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Text.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
};
/**
 * optional string value = 1;
 * @return {string}
 */
proto.proto.WhisperFormOutput.Text.prototype.getValue = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormOutput.Text} returns this
 */
proto.proto.WhisperFormOutput.Text.prototype.setValue = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormOutput.Time.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormOutput.Time.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormOutput.Time} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormOutput.Time.toObject = function (includeInstance, msg) {
        var f, obj = {
            value: (f = msg.getValue()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormOutput.Time}
 */
proto.proto.WhisperFormOutput.Time.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormOutput.Time;
    return proto.proto.WhisperFormOutput.Time.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormOutput.Time} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormOutput.Time}
 */
proto.proto.WhisperFormOutput.Time.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new google_protobuf_timestamp_pb.Timestamp;
                reader.readMessage(value, google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
                msg.setValue(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormOutput.Time.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormOutput.Time.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormOutput.Time} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormOutput.Time.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getValue();
    if (f != null) {
        writer.writeMessage(1, f, google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter);
    }
};
/**
 * optional google.protobuf.Timestamp value = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.proto.WhisperFormOutput.Time.prototype.getValue = function () {
    return /** @type{?proto.google.protobuf.Timestamp} */ (jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};
/**
 * @param {?proto.google.protobuf.Timestamp|undefined} value
 * @return {!proto.proto.WhisperFormOutput.Time} returns this
*/
proto.proto.WhisperFormOutput.Time.prototype.setValue = function (value) {
    return jspb.Message.setWrapperField(this, 1, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput.Time} returns this
 */
proto.proto.WhisperFormOutput.Time.prototype.clearValue = function () {
    return this.setValue(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.Time.prototype.hasValue = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Checkbox checkbox = 1;
 * @return {?proto.proto.WhisperFormOutput.Checkbox}
 */
proto.proto.WhisperFormOutput.prototype.getCheckbox = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Checkbox} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Checkbox, 1));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Checkbox|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setCheckbox = function (value) {
    return jspb.Message.setOneofWrapperField(this, 1, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearCheckbox = function () {
    return this.setCheckbox(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasCheckbox = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional Email email = 2;
 * @return {?proto.proto.WhisperFormOutput.Email}
 */
proto.proto.WhisperFormOutput.prototype.getEmail = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Email} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Email, 2));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Email|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setEmail = function (value) {
    return jspb.Message.setOneofWrapperField(this, 2, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearEmail = function () {
    return this.setEmail(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasEmail = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional Markdown markdown = 3;
 * @return {?proto.proto.WhisperFormOutput.Markdown}
 */
proto.proto.WhisperFormOutput.prototype.getMarkdown = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Markdown} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Markdown, 3));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Markdown|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setMarkdown = function (value) {
    return jspb.Message.setOneofWrapperField(this, 3, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearMarkdown = function () {
    return this.setMarkdown(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasMarkdown = function () {
    return jspb.Message.getField(this, 3) != null;
};
/**
 * optional Number number = 4;
 * @return {?proto.proto.WhisperFormOutput.Number}
 */
proto.proto.WhisperFormOutput.prototype.getNumber = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Number} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Number, 4));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Number|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setNumber = function (value) {
    return jspb.Message.setOneofWrapperField(this, 4, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearNumber = function () {
    return this.setNumber(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasNumber = function () {
    return jspb.Message.getField(this, 4) != null;
};
/**
 * optional Password password = 5;
 * @return {?proto.proto.WhisperFormOutput.Password}
 */
proto.proto.WhisperFormOutput.prototype.getPassword = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Password} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Password, 5));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Password|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setPassword = function (value) {
    return jspb.Message.setOneofWrapperField(this, 5, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearPassword = function () {
    return this.setPassword(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasPassword = function () {
    return jspb.Message.getField(this, 5) != null;
};
/**
 * optional Radio radio = 6;
 * @return {?proto.proto.WhisperFormOutput.Radio}
 */
proto.proto.WhisperFormOutput.prototype.getRadio = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Radio} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Radio, 6));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Radio|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setRadio = function (value) {
    return jspb.Message.setOneofWrapperField(this, 6, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearRadio = function () {
    return this.setRadio(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasRadio = function () {
    return jspb.Message.getField(this, 6) != null;
};
/**
 * optional Select select = 7;
 * @return {?proto.proto.WhisperFormOutput.Select}
 */
proto.proto.WhisperFormOutput.prototype.getSelect = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Select} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Select, 7));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Select|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setSelect = function (value) {
    return jspb.Message.setOneofWrapperField(this, 7, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearSelect = function () {
    return this.setSelect(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasSelect = function () {
    return jspb.Message.getField(this, 7) != null;
};
/**
 * optional Tel tel = 8;
 * @return {?proto.proto.WhisperFormOutput.Tel}
 */
proto.proto.WhisperFormOutput.prototype.getTel = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Tel} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Tel, 8));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Tel|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setTel = function (value) {
    return jspb.Message.setOneofWrapperField(this, 8, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearTel = function () {
    return this.setTel(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasTel = function () {
    return jspb.Message.getField(this, 8) != null;
};
/**
 * optional Text text = 9;
 * @return {?proto.proto.WhisperFormOutput.Text}
 */
proto.proto.WhisperFormOutput.prototype.getText = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Text} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Text, 9));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Text|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setText = function (value) {
    return jspb.Message.setOneofWrapperField(this, 9, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearText = function () {
    return this.setText(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasText = function () {
    return jspb.Message.getField(this, 9) != null;
};
/**
 * optional Time time = 10;
 * @return {?proto.proto.WhisperFormOutput.Time}
 */
proto.proto.WhisperFormOutput.prototype.getTime = function () {
    return /** @type{?proto.proto.WhisperFormOutput.Time} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput.Time, 10));
};
/**
 * @param {?proto.proto.WhisperFormOutput.Time|undefined} value
 * @return {!proto.proto.WhisperFormOutput} returns this
*/
proto.proto.WhisperFormOutput.prototype.setTime = function (value) {
    return jspb.Message.setOneofWrapperField(this, 10, proto.proto.WhisperFormOutput.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormOutput} returns this
 */
proto.proto.WhisperFormOutput.prototype.clearTime = function () {
    return this.setTime(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormOutput.prototype.hasTime = function () {
    return jspb.Message.getField(this, 10) != null;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormResult.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormResult.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormResult} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormResult.toObject = function (includeInstance, msg) {
        var f, obj = {
            submitted: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
            outputsMap: (f = msg.getOutputsMap()) ? f.toObject(includeInstance, proto.proto.WhisperFormOutput.toObject) : []
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormResult}
 */
proto.proto.WhisperFormResult.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormResult;
    return proto.proto.WhisperFormResult.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormResult}
 */
proto.proto.WhisperFormResult.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {boolean} */ (reader.readBool());
                msg.setSubmitted(value);
                break;
            case 2:
                var value = msg.getOutputsMap();
                reader.readMessage(value, function (message, reader) {
                    jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.proto.WhisperFormOutput.deserializeBinaryFromReader, "", new proto.proto.WhisperFormOutput());
                });
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormResult.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormResult.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormResult.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getSubmitted();
    if (f) {
        writer.writeBool(1, f);
    }
    f = message.getOutputsMap(true);
    if (f && f.getLength() > 0) {
        f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.proto.WhisperFormOutput.serializeBinaryToWriter);
    }
};
/**
 * optional bool submitted = 1;
 * @return {boolean}
 */
proto.proto.WhisperFormResult.prototype.getSubmitted = function () {
    return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};
/**
 * @param {boolean} value
 * @return {!proto.proto.WhisperFormResult} returns this
 */
proto.proto.WhisperFormResult.prototype.setSubmitted = function (value) {
    return jspb.Message.setProto3BooleanField(this, 1, value);
};
/**
 * map<string, WhisperFormOutput> outputs = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.proto.WhisperFormOutput>}
 */
proto.proto.WhisperFormResult.prototype.getOutputsMap = function (opt_noLazyCreate) {
    return /** @type {!jspb.Map<string,!proto.proto.WhisperFormOutput>} */ (jspb.Message.getMapField(this, 2, opt_noLazyCreate, proto.proto.WhisperFormOutput));
};
/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.proto.WhisperFormResult} returns this
 */
proto.proto.WhisperFormResult.prototype.clearOutputsMap = function () {
    this.getOutputsMap().clear();
    return this;
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormUpdate.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormUpdate.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormUpdate} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormUpdate.toObject = function (includeInstance, msg) {
        var f, obj = {
            key: jspb.Message.getFieldWithDefault(msg, 1, ""),
            output: (f = msg.getOutput()) && proto.proto.WhisperFormOutput.toObject(includeInstance, f)
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormUpdate}
 */
proto.proto.WhisperFormUpdate.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormUpdate;
    return proto.proto.WhisperFormUpdate.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormUpdate}
 */
proto.proto.WhisperFormUpdate.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = /** @type {string} */ (reader.readString());
                msg.setKey(value);
                break;
            case 2:
                var value = new proto.proto.WhisperFormOutput;
                reader.readMessage(value, proto.proto.WhisperFormOutput.deserializeBinaryFromReader);
                msg.setOutput(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormUpdate.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormUpdate.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormUpdate.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getKey();
    if (f.length > 0) {
        writer.writeString(1, f);
    }
    f = message.getOutput();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.WhisperFormOutput.serializeBinaryToWriter);
    }
};
/**
 * optional string key = 1;
 * @return {string}
 */
proto.proto.WhisperFormUpdate.prototype.getKey = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormUpdate} returns this
 */
proto.proto.WhisperFormUpdate.prototype.setKey = function (value) {
    return jspb.Message.setProto3StringField(this, 1, value);
};
/**
 * optional WhisperFormOutput output = 2;
 * @return {?proto.proto.WhisperFormOutput}
 */
proto.proto.WhisperFormUpdate.prototype.getOutput = function () {
    return /** @type{?proto.proto.WhisperFormOutput} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormOutput, 2));
};
/**
 * @param {?proto.proto.WhisperFormOutput|undefined} value
 * @return {!proto.proto.WhisperFormUpdate} returns this
*/
proto.proto.WhisperFormUpdate.prototype.setOutput = function (value) {
    return jspb.Message.setWrapperField(this, 2, value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormUpdate} returns this
 */
proto.proto.WhisperFormUpdate.prototype.clearOutput = function () {
    return this.setOutput(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormUpdate.prototype.hasOutput = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.WhisperFormStreamResponse.oneofGroups_ = [[1, 2]];
/**
 * @enum {number}
 */
proto.proto.WhisperFormStreamResponse.WhisperformresponseoneofCase = {
    WHISPERFORMRESPONSEONEOF_NOT_SET: 0,
    RESULT: 1,
    UPDATE: 2
};
/**
 * @return {proto.proto.WhisperFormStreamResponse.WhisperformresponseoneofCase}
 */
proto.proto.WhisperFormStreamResponse.prototype.getWhisperformresponseoneofCase = function () {
    return /** @type {proto.proto.WhisperFormStreamResponse.WhisperformresponseoneofCase} */ (jspb.Message.computeOneofCase(this, proto.proto.WhisperFormStreamResponse.oneofGroups_[0]));
};
if (jspb.Message.GENERATE_TO_OBJECT) {
    /**
     * Creates an object representation of this proto.
     * Field names that are reserved in JavaScript and will be renamed to pb_name.
     * Optional fields that are not set will be set to undefined.
     * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
     * For the list of reserved names please see:
     *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
     * @param {boolean=} opt_includeInstance Deprecated. whether to include the
     *     JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @return {!Object}
     */
    proto.proto.WhisperFormStreamResponse.prototype.toObject = function (opt_includeInstance) {
        return proto.proto.WhisperFormStreamResponse.toObject(opt_includeInstance, this);
    };
    /**
     * Static version of the {@see toObject} method.
     * @param {boolean|undefined} includeInstance Deprecated. Whether to include
     *     the JSPB instance for transitional soy proto support:
     *     http://goto/soy-param-migration
     * @param {!proto.proto.WhisperFormStreamResponse} msg The msg instance to transform.
     * @return {!Object}
     * @suppress {unusedLocalVariables} f is only used for nested messages
     */
    proto.proto.WhisperFormStreamResponse.toObject = function (includeInstance, msg) {
        var f, obj = {
            result: (f = msg.getResult()) && proto.proto.WhisperFormResult.toObject(includeInstance, f),
            update: (f = msg.getUpdate()) && proto.proto.WhisperFormUpdate.toObject(includeInstance, f),
            error: jspb.Message.getFieldWithDefault(msg, 15, "")
        };
        if (includeInstance) {
            obj.$jspbMessageInstance = msg;
        }
        return obj;
    };
}
/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.WhisperFormStreamResponse}
 */
proto.proto.WhisperFormStreamResponse.deserializeBinary = function (bytes) {
    var reader = new jspb.BinaryReader(bytes);
    var msg = new proto.proto.WhisperFormStreamResponse;
    return proto.proto.WhisperFormStreamResponse.deserializeBinaryFromReader(msg, reader);
};
/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.WhisperFormStreamResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.WhisperFormStreamResponse}
 */
proto.proto.WhisperFormStreamResponse.deserializeBinaryFromReader = function (msg, reader) {
    while (reader.nextField()) {
        if (reader.isEndGroup()) {
            break;
        }
        var field = reader.getFieldNumber();
        switch (field) {
            case 1:
                var value = new proto.proto.WhisperFormResult;
                reader.readMessage(value, proto.proto.WhisperFormResult.deserializeBinaryFromReader);
                msg.setResult(value);
                break;
            case 2:
                var value = new proto.proto.WhisperFormUpdate;
                reader.readMessage(value, proto.proto.WhisperFormUpdate.deserializeBinaryFromReader);
                msg.setUpdate(value);
                break;
            case 15:
                var value = /** @type {string} */ (reader.readString());
                msg.setError(value);
                break;
            default:
                reader.skipField();
                break;
        }
    }
    return msg;
};
/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.WhisperFormStreamResponse.prototype.serializeBinary = function () {
    var writer = new jspb.BinaryWriter();
    proto.proto.WhisperFormStreamResponse.serializeBinaryToWriter(this, writer);
    return writer.getResultBuffer();
};
/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.WhisperFormStreamResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.WhisperFormStreamResponse.serializeBinaryToWriter = function (message, writer) {
    var f = undefined;
    f = message.getResult();
    if (f != null) {
        writer.writeMessage(1, f, proto.proto.WhisperFormResult.serializeBinaryToWriter);
    }
    f = message.getUpdate();
    if (f != null) {
        writer.writeMessage(2, f, proto.proto.WhisperFormUpdate.serializeBinaryToWriter);
    }
    f = message.getError();
    if (f.length > 0) {
        writer.writeString(15, f);
    }
};
/**
 * optional WhisperFormResult result = 1;
 * @return {?proto.proto.WhisperFormResult}
 */
proto.proto.WhisperFormStreamResponse.prototype.getResult = function () {
    return /** @type{?proto.proto.WhisperFormResult} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormResult, 1));
};
/**
 * @param {?proto.proto.WhisperFormResult|undefined} value
 * @return {!proto.proto.WhisperFormStreamResponse} returns this
*/
proto.proto.WhisperFormStreamResponse.prototype.setResult = function (value) {
    return jspb.Message.setOneofWrapperField(this, 1, proto.proto.WhisperFormStreamResponse.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormStreamResponse} returns this
 */
proto.proto.WhisperFormStreamResponse.prototype.clearResult = function () {
    return this.setResult(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormStreamResponse.prototype.hasResult = function () {
    return jspb.Message.getField(this, 1) != null;
};
/**
 * optional WhisperFormUpdate update = 2;
 * @return {?proto.proto.WhisperFormUpdate}
 */
proto.proto.WhisperFormStreamResponse.prototype.getUpdate = function () {
    return /** @type{?proto.proto.WhisperFormUpdate} */ (jspb.Message.getWrapperField(this, proto.proto.WhisperFormUpdate, 2));
};
/**
 * @param {?proto.proto.WhisperFormUpdate|undefined} value
 * @return {!proto.proto.WhisperFormStreamResponse} returns this
*/
proto.proto.WhisperFormStreamResponse.prototype.setUpdate = function (value) {
    return jspb.Message.setOneofWrapperField(this, 2, proto.proto.WhisperFormStreamResponse.oneofGroups_[0], value);
};
/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.WhisperFormStreamResponse} returns this
 */
proto.proto.WhisperFormStreamResponse.prototype.clearUpdate = function () {
    return this.setUpdate(undefined);
};
/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.WhisperFormStreamResponse.prototype.hasUpdate = function () {
    return jspb.Message.getField(this, 2) != null;
};
/**
 * optional string error = 15;
 * @return {string}
 */
proto.proto.WhisperFormStreamResponse.prototype.getError = function () {
    return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 15, ""));
};
/**
 * @param {string} value
 * @return {!proto.proto.WhisperFormStreamResponse} returns this
 */
proto.proto.WhisperFormStreamResponse.prototype.setError = function (value) {
    return jspb.Message.setProto3StringField(this, 15, value);
};
goog.object.extend(exports, proto.proto);
